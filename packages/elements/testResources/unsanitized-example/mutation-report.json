{
  "files": {
    "src/child-process-as-promised.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "src/child-process-as-promised.ts@3:38-5:1\nObjectLiteral: {}",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'toString')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/child-process-as-promised.ts",
          "killedBy": ["0"],
          "coveredBy": ["0"],
          "location": {
            "end": {
              "column": 2,
              "line": 6
            },
            "start": {
              "column": 39,
              "line": 4
            }
          }
        }
      ],
      "source": "import * as childProcess from 'child_process';\nimport { promisify } from 'util';\n\nexport const childProcessAsPromised = {\n  exec: promisify(childProcess.exec),\n};\n"
    },
    "src/deep-merge.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "src/deep-merge.ts@9:75-21:1\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected { foo: 'bar' } to deeply equal { foo: 'bar', baz: 42 }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["1"],
          "coveredBy": ["1", "2", "3", "4"],
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 76,
              "line": 10
            }
          }
        },
        {
          "id": "src/deep-merge.ts@10:42-20:3\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected { foo: 'bar' } to deeply equal { foo: 'bar', baz: 42 }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["1"],
          "coveredBy": ["1", "2", "3", "4"],
          "location": {
            "end": {
              "column": 4,
              "line": 21
            },
            "start": {
              "column": 43,
              "line": 11
            }
          }
        },
        {
          "id": "src/deep-merge.ts@13:8-13:35\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected { foo: undefined } to deeply equal { foo: '1' }",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["4"],
          "coveredBy": ["1", "2", "3", "4"],
          "location": {
            "end": {
              "column": 36,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "src/deep-merge.ts@13:8-13:35\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected { foo: 'bar' } to deeply equal { foo: 'bar', baz: 42 }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["1"],
          "coveredBy": ["1", "2", "3", "4"],
          "location": {
            "end": {
              "column": 36,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "src/deep-merge.ts@13:8-13:35\nEqualityOperator: overrideValue === undefined",
          "mutatorName": "EqualityOperator",
          "replacement": "overrideValue === undefined",
          "statusReason": "expected { foo: 'bar' } to deeply equal { foo: 'bar', baz: 42 }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["1"],
          "coveredBy": ["1", "2", "3", "4"],
          "location": {
            "end": {
              "column": 36,
              "line": 14
            },
            "start": {
              "column": 9,
              "line": 14
            }
          }
        },
        {
          "id": "src/deep-merge.ts@13:37-19:5\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected { foo: 'bar' } to deeply equal { foo: 'bar', baz: 42 }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["1"],
          "coveredBy": ["1", "2", "3"],
          "location": {
            "end": {
              "column": 6,
              "line": 20
            },
            "start": {
              "column": 38,
              "line": 14
            }
          }
        },
        {
          "id": "src/deep-merge.ts@14:10-14:140\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected { child: { baz: 42 } } to deeply equal { child: { foo: 'child', baz: 42 } }",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["2"],
          "coveredBy": ["1", "2", "3"],
          "location": {
            "end": {
              "column": 141,
              "line": 15
            },
            "start": {
              "column": 11,
              "line": 15
            }
          }
        },
        {
          "id": "src/deep-merge.ts@14:10-14:140\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected { foo: 'bar' } to deeply equal { foo: 'bar', baz: 42 }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["1"],
          "coveredBy": ["1", "2", "3"],
          "location": {
            "end": {
              "column": 141,
              "line": 15
            },
            "start": {
              "column": 11,
              "line": 15
            }
          }
        },
        {
          "id": "src/deep-merge.ts@14:10-14:140\nLogicalOperator: (defaultValue === undefined || typeof defaultValue !== 'object' || typeof overrideValue !== 'object') && Array.isArray(defaultValue)",
          "mutatorName": "LogicalOperator",
          "replacement": "(defaultValue === undefined || typeof defaultValue !== 'object' || typeof overrideValue !== 'object') && Array.isArray(defaultValue)",
          "statusReason": "expected { foo: 'bar' } to deeply equal { foo: 'bar', baz: 42 }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["1"],
          "coveredBy": ["1", "2", "3"],
          "location": {
            "end": {
              "column": 141,
              "line": 15
            },
            "start": {
              "column": 11,
              "line": 15
            }
          }
        },
        {
          "id": "src/deep-merge.ts@14:10-14:109\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected { foo: 'bar' } to deeply equal { foo: 'bar', baz: 42 }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["1"],
          "coveredBy": ["1", "2", "3"],
          "location": {
            "end": {
              "column": 110,
              "line": 15
            },
            "start": {
              "column": 11,
              "line": 15
            }
          }
        },
        {
          "id": "src/deep-merge.ts@14:10-14:109\nLogicalOperator: (defaultValue === undefined || typeof defaultValue !== 'object') && typeof overrideValue !== 'object'",
          "mutatorName": "LogicalOperator",
          "replacement": "(defaultValue === undefined || typeof defaultValue !== 'object') && typeof overrideValue !== 'object'",
          "status": "Survived",
          "testsCompleted": 3,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": [],
          "coveredBy": ["1", "2", "3"],
          "location": {
            "end": {
              "column": 110,
              "line": 15
            },
            "start": {
              "column": 11,
              "line": 15
            }
          }
        },
        {
          "id": "src/deep-merge.ts@14:10-14:72\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Survived",
          "testsCompleted": 3,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": [],
          "coveredBy": ["1", "2", "3"],
          "location": {
            "end": {
              "column": 73,
              "line": 15
            },
            "start": {
              "column": 11,
              "line": 15
            }
          }
        },
        {
          "id": "src/deep-merge.ts@14:10-14:72\nLogicalOperator: defaultValue === undefined && typeof defaultValue !== 'object'",
          "mutatorName": "LogicalOperator",
          "replacement": "defaultValue === undefined && typeof defaultValue !== 'object'",
          "status": "Survived",
          "testsCompleted": 3,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": [],
          "coveredBy": ["1", "2", "3"],
          "location": {
            "end": {
              "column": 73,
              "line": 15
            },
            "start": {
              "column": 11,
              "line": 15
            }
          }
        },
        {
          "id": "src/deep-merge.ts@14:10-14:36\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Survived",
          "testsCompleted": 3,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": [],
          "coveredBy": ["1", "2", "3"],
          "location": {
            "end": {
              "column": 37,
              "line": 15
            },
            "start": {
              "column": 11,
              "line": 15
            }
          }
        },
        {
          "id": "src/deep-merge.ts@14:10-14:36\nEqualityOperator: defaultValue !== undefined",
          "mutatorName": "EqualityOperator",
          "replacement": "defaultValue !== undefined",
          "statusReason": "expected { child: { baz: 42 } } to deeply equal { child: { foo: 'child', baz: 42 } }",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["2"],
          "coveredBy": ["1", "2", "3"],
          "location": {
            "end": {
              "column": 37,
              "line": 15
            },
            "start": {
              "column": 11,
              "line": 15
            }
          }
        },
        {
          "id": "src/deep-merge.ts@14:40-14:72\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Survived",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": [],
          "coveredBy": ["2", "3"],
          "location": {
            "end": {
              "column": 73,
              "line": 15
            },
            "start": {
              "column": 41,
              "line": 15
            }
          }
        },
        {
          "id": "src/deep-merge.ts@14:40-14:72\nEqualityOperator: typeof defaultValue === 'object'",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof defaultValue === 'object'",
          "statusReason": "expected { child: { baz: 42 } } to deeply equal { child: { foo: 'child', baz: 42 } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["2"],
          "coveredBy": ["2", "3"],
          "location": {
            "end": {
              "column": 73,
              "line": 15
            },
            "start": {
              "column": 41,
              "line": 15
            }
          }
        },
        {
          "id": "src/deep-merge.ts@14:64-14:72\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected { child: { baz: 42 } } to deeply equal { child: { foo: 'child', baz: 42 } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["2"],
          "coveredBy": ["2", "3"],
          "location": {
            "end": {
              "column": 73,
              "line": 15
            },
            "start": {
              "column": 65,
              "line": 15
            }
          }
        },
        {
          "id": "src/deep-merge.ts@14:76-14:109\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "Survived",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": [],
          "coveredBy": ["2", "3"],
          "location": {
            "end": {
              "column": 110,
              "line": 15
            },
            "start": {
              "column": 77,
              "line": 15
            }
          }
        },
        {
          "id": "src/deep-merge.ts@14:76-14:109\nEqualityOperator: typeof overrideValue === 'object'",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof overrideValue === 'object'",
          "statusReason": "expected { child: { baz: 42 } } to deeply equal { child: { foo: 'child', baz: 42 } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["2"],
          "coveredBy": ["2", "3"],
          "location": {
            "end": {
              "column": 110,
              "line": 15
            },
            "start": {
              "column": 77,
              "line": 15
            }
          }
        },
        {
          "id": "src/deep-merge.ts@14:101-14:109\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected { child: { baz: 42 } } to deeply equal { child: { foo: 'child', baz: 42 } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["2"],
          "coveredBy": ["2", "3"],
          "location": {
            "end": {
              "column": 110,
              "line": 15
            },
            "start": {
              "column": 102,
              "line": 15
            }
          }
        },
        {
          "id": "src/deep-merge.ts@14:142-16:7\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected { foo: 'bar' } to deeply equal { foo: 'bar', baz: 42 }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["1"],
          "coveredBy": ["1", "2", "3"],
          "location": {
            "end": {
              "column": 8,
              "line": 17
            },
            "start": {
              "column": 143,
              "line": 15
            }
          }
        },
        {
          "id": "src/deep-merge.ts@16:13-18:7\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected { child: { foo: 'child' } } to deeply equal { child: { foo: 'child', baz: 42 } }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/deep-merge.ts",
          "killedBy": ["2"],
          "coveredBy": ["2"],
          "location": {
            "end": {
              "column": 8,
              "line": 19
            },
            "start": {
              "column": 14,
              "line": 17
            }
          }
        }
      ],
      "source": "export type DeepPartial<T> = {\n  [P in keyof T]?: T[P] extends Record<string, any> ? DeepPartial<T[P]> : T[P];\n};\n\n/**\n *\n * @param defaults\n * @param overrides\n */\nexport function deepMerge<T>(defaults: T, overrides: DeepPartial<T>): void {\n  Object.keys(overrides).forEach((key) => {\n    const defaultValue = (defaults as any)[key];\n    const overrideValue = (overrides as any)[key];\n    if (overrideValue !== undefined) {\n      if (defaultValue === undefined || typeof defaultValue !== 'object' || typeof overrideValue !== 'object' || Array.isArray(defaultValue)) {\n        (defaults as any)[key] = overrideValue;\n      } else {\n        deepMerge(defaultValue, overrideValue as DeepPartial<T>);\n      }\n    }\n  });\n}\n"
    },
    "src/errors.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "src/errors.ts@0:81-2:1\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'name: message\\nqux' to equal 'name: foo (baz) qux'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["6"],
          "coveredBy": ["6", "7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 2,
              "line": 3
            },
            "start": {
              "column": 82,
              "line": 1
            }
          }
        },
        {
          "id": "src/errors.ts@1:9-1:92\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'Error: undefined (undefined) Error: e…' to equal 'Error: expected error\\nError: expecte…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["7"],
          "coveredBy": ["6", "7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 93,
              "line": 2
            },
            "start": {
              "column": 10,
              "line": 2
            }
          }
        },
        {
          "id": "src/errors.ts@1:9-1:92\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'name: message\\nqux' to equal 'name: foo (baz) qux'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["6"],
          "coveredBy": ["6", "7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 93,
              "line": 2
            },
            "start": {
              "column": 10,
              "line": 2
            }
          }
        },
        {
          "id": "src/errors.ts@1:9-1:92\nLogicalOperator: error instanceof Error || typeof (error as NodeJS.ErrnoException).code === 'string'",
          "mutatorName": "LogicalOperator",
          "replacement": "error instanceof Error || typeof (error as NodeJS.ErrnoException).code === 'string'",
          "statusReason": "expected 'Error: undefined (undefined) Error: e…' to equal 'Error: expected error\\nError: expecte…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["7"],
          "coveredBy": ["6", "7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 93,
              "line": 2
            },
            "start": {
              "column": 10,
              "line": 2
            }
          }
        },
        {
          "id": "src/errors.ts@1:35-1:92\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'Error: undefined (undefined) Error: e…' to equal 'Error: expected error\\nError: expecte…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["7"],
          "coveredBy": ["6", "7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 93,
              "line": 2
            },
            "start": {
              "column": 36,
              "line": 2
            }
          }
        },
        {
          "id": "src/errors.ts@1:35-1:92\nEqualityOperator: typeof (error as NodeJS.ErrnoException).code !== 'string'",
          "mutatorName": "EqualityOperator",
          "replacement": "typeof (error as NodeJS.ErrnoException).code !== 'string'",
          "statusReason": "expected 'name: message\\nqux' to equal 'name: foo (baz) qux'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["6"],
          "coveredBy": ["6", "7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 93,
              "line": 2
            },
            "start": {
              "column": 36,
              "line": 2
            }
          }
        },
        {
          "id": "src/errors.ts@1:84-1:92\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'name: message\\nqux' to equal 'name: foo (baz) qux'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["6"],
          "coveredBy": ["6", "7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 93,
              "line": 2
            },
            "start": {
              "column": 85,
              "line": 2
            }
          }
        },
        {
          "id": "src/errors.ts@5:50-21:1\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to equal ''",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["5"],
          "coveredBy": ["5", "6", "7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 2,
              "line": 22
            },
            "start": {
              "column": 51,
              "line": 6
            }
          }
        },
        {
          "id": "src/errors.ts@6:6-6:12\nBooleanLiteral: error",
          "mutatorName": "BooleanLiteral",
          "replacement": "error",
          "statusReason": "Cannot read properties of undefined (reading 'toString')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["5"],
          "coveredBy": ["5", "6", "7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 13,
              "line": 7
            },
            "start": {
              "column": 7,
              "line": 7
            }
          }
        },
        {
          "id": "src/errors.ts@6:6-6:12\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected '' to equal 'name: foo (baz) qux'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["6"],
          "coveredBy": ["5", "6", "7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 13,
              "line": 7
            },
            "start": {
              "column": 7,
              "line": 7
            }
          }
        },
        {
          "id": "src/errors.ts@6:6-6:12\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of undefined (reading 'toString')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["5"],
          "coveredBy": ["5", "6", "7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 13,
              "line": 7
            },
            "start": {
              "column": 7,
              "line": 7
            }
          }
        },
        {
          "id": "src/errors.ts@6:14-8:3\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'toString')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["5"],
          "coveredBy": ["5"],
          "location": {
            "end": {
              "column": 4,
              "line": 9
            },
            "start": {
              "column": 15,
              "line": 7
            }
          }
        },
        {
          "id": "src/errors.ts@7:11-7:13\nStringLiteral: \"Stryker was here!\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "expected 'Stryker was here!' to equal ''",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["5"],
          "coveredBy": ["5"],
          "location": {
            "end": {
              "column": 14,
              "line": 8
            },
            "start": {
              "column": 12,
              "line": 8
            }
          }
        },
        {
          "id": "src/errors.ts@9:6-9:28\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "Survived",
          "testsCompleted": 5,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": [],
          "coveredBy": ["6", "7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 29,
              "line": 10
            },
            "start": {
              "column": 7,
              "line": 10
            }
          }
        },
        {
          "id": "src/errors.ts@9:6-9:28\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'name: message' to equal 'name: foo (baz) qux'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["6"],
          "coveredBy": ["6", "7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 29,
              "line": 10
            },
            "start": {
              "column": 7,
              "line": 10
            }
          }
        },
        {
          "id": "src/errors.ts@9:30-19:3\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'name: message' to equal 'name: foo (baz) qux'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["6"],
          "coveredBy": ["6", "7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 4,
              "line": 20
            },
            "start": {
              "column": 31,
              "line": 10
            }
          }
        },
        {
          "id": "src/errors.ts@10:8-10:31\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'Error: undefined (undefined) Error: e…' to equal 'Error: expected error\\nError: expecte…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["7"],
          "coveredBy": ["6", "7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 32,
              "line": 11
            },
            "start": {
              "column": 9,
              "line": 11
            }
          }
        },
        {
          "id": "src/errors.ts@10:8-10:31\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'name: message\\nqux' to equal 'name: foo (baz) qux'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["6"],
          "coveredBy": ["6", "7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 32,
              "line": 11
            },
            "start": {
              "column": 9,
              "line": 11
            }
          }
        },
        {
          "id": "src/errors.ts@10:33-12:5\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'name: message\\nqux' to equal 'name: foo (baz) qux'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["6"],
          "coveredBy": ["6"],
          "location": {
            "end": {
              "column": 6,
              "line": 13
            },
            "start": {
              "column": 34,
              "line": 11
            }
          }
        },
        {
          "id": "src/errors.ts@11:13-11:77\nStringLiteral: ``",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '' to equal 'name: foo (baz) qux'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["6"],
          "coveredBy": ["6"],
          "location": {
            "end": {
              "column": 78,
              "line": 12
            },
            "start": {
              "column": 14,
              "line": 12
            }
          }
        },
        {
          "id": "src/errors.ts@13:20-13:53\nStringLiteral: ``",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '\\nError: expected error\\n    at Conte…' to equal 'Error: expected error\\nError: expecte…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["7"],
          "coveredBy": ["7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 54,
              "line": 14
            },
            "start": {
              "column": 21,
              "line": 14
            }
          }
        },
        {
          "id": "src/errors.ts@14:8-14:19\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'toString')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["8"],
          "coveredBy": ["7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 20,
              "line": 15
            },
            "start": {
              "column": 9,
              "line": 15
            }
          }
        },
        {
          "id": "src/errors.ts@14:8-14:19\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'Error: expected error' to equal 'Error: expected error\\nError: expecte…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["7"],
          "coveredBy": ["7", "8", "97", "98"],
          "location": {
            "end": {
              "column": 20,
              "line": 15
            },
            "start": {
              "column": 9,
              "line": 15
            }
          }
        },
        {
          "id": "src/errors.ts@14:21-16:5\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected 'Error: expected error' to equal 'Error: expected error\\nError: expecte…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["7"],
          "coveredBy": ["7", "97", "98"],
          "location": {
            "end": {
              "column": 6,
              "line": 17
            },
            "start": {
              "column": 22,
              "line": 15
            }
          }
        },
        {
          "id": "src/errors.ts@15:13-15:52\nStringLiteral: ``",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '' to equal 'Error: expected error\\nError: expecte…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": ["7"],
          "coveredBy": ["7", "97", "98"],
          "location": {
            "end": {
              "column": 53,
              "line": 16
            },
            "start": {
              "column": 14,
              "line": 16
            }
          }
        },
        {
          "id": "src/errors.ts@16:11-18:5\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": [],
          "coveredBy": ["8"],
          "location": {
            "end": {
              "column": 6,
              "line": 19
            },
            "start": {
              "column": 12,
              "line": 17
            }
          }
        },
        {
          "id": "src/errors.ts@23:41-25:1\nObjectLiteral: {}",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 109,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 26
            },
            "start": {
              "column": 42,
              "line": 24
            }
          }
        },
        {
          "id": "src/errors.ts@24:25-24:33\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 109,
          "static": false,
          "relativeFileName": "src/errors.ts",
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 34,
              "line": 25
            },
            "start": {
              "column": 26,
              "line": 25
            }
          }
        }
      ],
      "source": "export function isErrnoException(error: unknown): error is NodeJS.ErrnoException {\n  return error instanceof Error && typeof (error as NodeJS.ErrnoException).code === 'string';\n}\n\n// eslint-disable-next-line @typescript-eslint/explicit-module-boundary-types\nexport function errorToString(error: any): string {\n  if (!error) {\n    return '';\n  }\n  if (error instanceof Error) {\n    if (isErrnoException(error)) {\n      return `${error.name}: ${error.code} (${error.syscall}) ${error.stack}`;\n    }\n    const message = `${error.name}: ${error.message}`;\n    if (error.stack) {\n      return `${message}\\n${error.stack.toString()}`;\n    } else {\n      return message;\n    }\n  }\n  return error.toString();\n}\n\nexport const ERROR_CODES = Object.freeze({\n  NoSuchFileOrDirectory: 'ENOENT',\n});\n"
    },
    "src/find-unserializables.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "src/find-unserializables.ts@7:93-60:1\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be truthy",
          "status": "Killed",
          "testsCompleted": 9,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["17"],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 2,
              "line": 61
            },
            "start": {
              "column": 94,
              "line": 8
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@9:4-10:123\nConditionalExpression: case 'number':",
          "mutatorName": "ConditionalExpression",
          "replacement": "case 'number':",
          "statusReason": "expected undefined to be truthy",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["20"],
          "coveredBy": ["9", "20", "21", "22", "24", "34"],
          "location": {
            "end": {
              "column": 124,
              "line": 11
            },
            "start": {
              "column": 5,
              "line": 10
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@9:9-9:17\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected undefined to be truthy",
          "status": "Killed",
          "testsCompleted": 12,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["20"],
          "coveredBy": [
            "9",
            "10",
            "11",
            "12",
            "13",
            "14",
            "15",
            "16",
            "17",
            "18",
            "19",
            "20",
            "21",
            "22",
            "23",
            "24",
            "25",
            "26",
            "27",
            "28",
            "29",
            "30",
            "31",
            "32",
            "33",
            "34"
          ],
          "location": {
            "end": {
              "column": 18,
              "line": 10
            },
            "start": {
              "column": 10,
              "line": 10
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@10:13-10:29\nBooleanLiteral: isFinite(thing)",
          "mutatorName": "BooleanLiteral",
          "replacement": "isFinite(thing)",
          "statusReason": "expected [ { …(2) } ] to be undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["9"],
          "coveredBy": ["9", "20", "21", "22", "24", "34"],
          "location": {
            "end": {
              "column": 30,
              "line": 11
            },
            "start": {
              "column": 14,
              "line": 11
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@10:32-10:110\nArrayDeclaration: []",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Cannot read properties of undefined (reading 'reason')",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["34"],
          "coveredBy": ["20", "21", "22", "34"],
          "location": {
            "end": {
              "column": 111,
              "line": 11
            },
            "start": {
              "column": 33,
              "line": 11
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@10:33-10:109\nObjectLiteral: {}",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to equal 'Number value `NaN` has no JSON repres…'",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["34"],
          "coveredBy": ["20", "21", "22", "34"],
          "location": {
            "end": {
              "column": 110,
              "line": 11
            },
            "start": {
              "column": 34,
              "line": 11
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@10:43-10:97\nStringLiteral: ``",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '' to equal 'Number value `NaN` has no JSON repres…'",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["34"],
          "coveredBy": ["20", "21", "22", "34"],
          "location": {
            "end": {
              "column": 98,
              "line": 11
            },
            "start": {
              "column": 44,
              "line": 11
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@10:105-10:107\nArrayDeclaration: [\"Stryker was here\"]",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "Survived",
          "testsCompleted": 4,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": [],
          "coveredBy": ["20", "21", "22", "34"],
          "location": {
            "end": {
              "column": 108,
              "line": 11
            },
            "start": {
              "column": 106,
              "line": 11
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@11:9-11:17\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 21,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": [],
          "coveredBy": ["10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 18,
              "line": 12
            },
            "start": {
              "column": 10,
              "line": 12
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@12:9-12:18\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 20,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": [],
          "coveredBy": ["10", "11", "12", "14", "15", "16", "17", "18", "19", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 19,
              "line": 13
            },
            "start": {
              "column": 10,
              "line": 13
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@13:4-14:13\nConditionalExpression: case 'undefined':",
          "mutatorName": "ConditionalExpression",
          "replacement": "case 'undefined':",
          "statusReason": "expected [ { path: [], …(1) } ] to be undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["10"],
          "coveredBy": ["10", "11", "13", "24", "28"],
          "location": {
            "end": {
              "column": 14,
              "line": 15
            },
            "start": {
              "column": 5,
              "line": 14
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@13:9-13:20\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 19,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": [],
          "coveredBy": ["11", "12", "14", "15", "16", "17", "18", "19", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 21,
              "line": 14
            },
            "start": {
              "column": 10,
              "line": 14
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@15:9-15:17\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected undefined to be truthy",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["18"],
          "coveredBy": ["12", "14", "15", "16", "17", "18", "19", "23", "24", "25", "26", "27", "28", "29", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 18,
              "line": 16
            },
            "start": {
              "column": 10,
              "line": 16
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@16:9-16:19\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected undefined to be truthy",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["19"],
          "coveredBy": ["12", "14", "15", "16", "17", "19", "23", "24", "25", "26", "27", "28", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 20,
              "line": 17
            },
            "start": {
              "column": 10,
              "line": 17
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@17:4-23:8\nConditionalExpression: case 'symbol':",
          "mutatorName": "ConditionalExpression",
          "replacement": "case 'symbol':",
          "statusReason": "expected 'Value is an instance of \"BigInt\", thi…' to equal 'Primitive type \"bigint\" has no JSON r…'",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["29"],
          "coveredBy": ["17", "18", "19", "25", "26", "27", "28", "29"],
          "location": {
            "end": {
              "column": 9,
              "line": 24
            },
            "start": {
              "column": 5,
              "line": 18
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@17:9-17:17\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected undefined to be truthy",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["17"],
          "coveredBy": ["12", "14", "15", "16", "17", "23", "24", "25", "26", "27", "28", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 18,
              "line": 18
            },
            "start": {
              "column": 10,
              "line": 18
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@18:13-23:7\nArrayDeclaration: []",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "expected undefined to deeply equal [ 'symbol' ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["25"],
          "coveredBy": ["17", "18", "19", "25", "26", "27", "28", "29"],
          "location": {
            "end": {
              "column": 8,
              "line": 24
            },
            "start": {
              "column": 14,
              "line": 19
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@19:8-22:9\nObjectLiteral: {}",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "Cannot read properties of undefined (reading 'unshift')",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["25"],
          "coveredBy": ["17", "18", "19", "25", "26", "27", "28", "29"],
          "location": {
            "end": {
              "column": 10,
              "line": 23
            },
            "start": {
              "column": 9,
              "line": 20
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@20:16-20:18\nArrayDeclaration: [\"Stryker was here\"]",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "statusReason": "expected [ 'symbol', 'Stryker was here' ] to deeply equal [ 'symbol' ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["25"],
          "coveredBy": ["17", "18", "19", "25", "26", "27", "28", "29"],
          "location": {
            "end": {
              "column": 19,
              "line": 21
            },
            "start": {
              "column": 17,
              "line": 21
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@21:18-21:79\nStringLiteral: ``",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '' to equal 'Primitive type \"bigint\" has no JSON r…'",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["29"],
          "coveredBy": ["17", "18", "19", "25", "26", "27", "28", "29"],
          "location": {
            "end": {
              "column": 80,
              "line": 22
            },
            "start": {
              "column": 19,
              "line": 22
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@24:4-58:8\nConditionalExpression: case 'object':",
          "mutatorName": "ConditionalExpression",
          "replacement": "case 'object':",
          "statusReason": "expected undefined to be truthy",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["23"],
          "coveredBy": ["12", "14", "15", "16", "23", "24", "25", "26", "27", "28", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 9,
              "line": 59
            },
            "start": {
              "column": 5,
              "line": 25
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@24:9-24:17\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected undefined to be truthy",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["23"],
          "coveredBy": ["12", "14", "15", "16", "23", "24", "25", "26", "27", "28", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 18,
              "line": 25
            },
            "start": {
              "column": 10,
              "line": 25
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@26:10-26:24\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected undefined to be truthy",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["23"],
          "coveredBy": ["12", "14", "15", "16", "23", "24", "25", "26", "27", "28", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 25,
              "line": 27
            },
            "start": {
              "column": 11,
              "line": 27
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@26:10-26:24\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot convert undefined or null to object",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["12"],
          "coveredBy": ["12", "14", "15", "16", "23", "24", "25", "26", "27", "28", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 25,
              "line": 27
            },
            "start": {
              "column": 11,
              "line": 27
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@26:10-26:24\nEqualityOperator: thing !== null",
          "mutatorName": "EqualityOperator",
          "replacement": "thing !== null",
          "statusReason": "Cannot convert undefined or null to object",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["12"],
          "coveredBy": ["12", "14", "15", "16", "23", "24", "25", "26", "27", "28", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 25,
              "line": 27
            },
            "start": {
              "column": 11,
              "line": 27
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@26:26-28:7\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot convert undefined or null to object",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["12"],
          "coveredBy": ["12", "24"],
          "location": {
            "end": {
              "column": 8,
              "line": 29
            },
            "start": {
              "column": 27,
              "line": 27
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@29:10-29:30\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "thing.flatMap is not a function",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["14"],
          "coveredBy": ["14", "15", "16", "23", "24", "25", "26", "27", "28", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 31,
              "line": 30
            },
            "start": {
              "column": 11,
              "line": 30
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@29:10-29:30\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected [ { path: [], …(1) } ] to be undefined",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["15"],
          "coveredBy": ["14", "15", "16", "23", "24", "25", "26", "27", "28", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 31,
              "line": 30
            },
            "start": {
              "column": 11,
              "line": 30
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@29:32-39:7\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected [ { path: [], …(1) } ] to be undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["15"],
          "coveredBy": ["15", "24", "27", "28"],
          "location": {
            "end": {
              "column": 8,
              "line": 40
            },
            "start": {
              "column": 33,
              "line": 30
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@30:23-37:27\nMethodExpression: thing.flatMap((child, index) => findUnserializables(child)?.map(description => {\n  description.path.unshift(index.toString());\n  return description;\n}))",
          "mutatorName": "MethodExpression",
          "replacement": "thing.flatMap((child, index) => findUnserializables(child)?.map(description => {\n  description.path.unshift(index.toString());\n  return description;\n}))",
          "statusReason": "Cannot read properties of undefined (reading 'path')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["24"],
          "coveredBy": ["15", "24", "27", "28"],
          "location": {
            "end": {
              "column": 28,
              "line": 38
            },
            "start": {
              "column": 24,
              "line": 31
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@31:19-35:14\nArrowFunction: () => undefined",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected undefined to deeply equal [ '0' ]",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["27"],
          "coveredBy": ["15", "24", "27", "28"],
          "location": {
            "end": {
              "column": 15,
              "line": 36
            },
            "start": {
              "column": 20,
              "line": 32
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@32:12-32:43\nOptionalChaining: findUnserializables(child).map",
          "mutatorName": "OptionalChaining",
          "replacement": "findUnserializables(child).map",
          "statusReason": "Cannot read properties of undefined (reading 'map')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["24"],
          "coveredBy": ["24", "27", "28"],
          "location": {
            "end": {
              "column": 44,
              "line": 33
            },
            "start": {
              "column": 13,
              "line": 33
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@32:61-35:13\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to deeply equal [ '0' ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["27"],
          "coveredBy": ["27", "28"],
          "location": {
            "end": {
              "column": 14,
              "line": 36
            },
            "start": {
              "column": 62,
              "line": 33
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@41:10-41:64\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected undefined to be truthy",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["23"],
          "coveredBy": ["14", "16", "23", "24", "25", "26", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 65,
              "line": 42
            },
            "start": {
              "column": 11,
              "line": 42
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@41:10-41:64\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected [ { path: [], …(1) } ] to be undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["14"],
          "coveredBy": ["14", "16", "23", "24", "25", "26", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 65,
              "line": 42
            },
            "start": {
              "column": 11,
              "line": 42
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@41:10-41:64\nLogicalOperator: thingProto === Object.prototype && thingProto === null",
          "mutatorName": "LogicalOperator",
          "replacement": "thingProto === Object.prototype && thingProto === null",
          "statusReason": "expected [ { path: [], …(1) } ] to be undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["14"],
          "coveredBy": ["14", "16", "23", "24", "25", "26", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 65,
              "line": 42
            },
            "start": {
              "column": 11,
              "line": 42
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@41:10-41:41\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected [ { path: [], …(1) } ] to be undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["14"],
          "coveredBy": ["14", "16", "23", "24", "25", "26", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 42,
              "line": 42
            },
            "start": {
              "column": 11,
              "line": 42
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@41:10-41:41\nEqualityOperator: thingProto !== Object.prototype",
          "mutatorName": "EqualityOperator",
          "replacement": "thingProto !== Object.prototype",
          "statusReason": "expected [ { path: [], …(1) } ] to be undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["14"],
          "coveredBy": ["14", "16", "23", "24", "25", "26", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 42,
              "line": 42
            },
            "start": {
              "column": 11,
              "line": 42
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@41:45-41:64\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot read properties of undefined (reading 'name')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["16"],
          "coveredBy": ["16", "23", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 65,
              "line": 42
            },
            "start": {
              "column": 46,
              "line": 42
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@41:45-41:64\nEqualityOperator: thingProto !== null",
          "mutatorName": "EqualityOperator",
          "replacement": "thingProto !== null",
          "statusReason": "Cannot read properties of undefined (reading 'name')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["16"],
          "coveredBy": ["16", "23", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 65,
              "line": 42
            },
            "start": {
              "column": 46,
              "line": 42
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@41:66-51:7\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected [ { path: [], …(1) } ] to be undefined",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["14"],
          "coveredBy": ["14", "16", "24", "25", "26"],
          "location": {
            "end": {
              "column": 8,
              "line": 52
            },
            "start": {
              "column": 67,
              "line": 42
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@42:23-49:27\nMethodExpression: Object.entries(thing).flatMap(([key, val]) => findUnserializables(val)?.map(description => {\n  description.path.unshift(key);\n  return description;\n}))",
          "mutatorName": "MethodExpression",
          "replacement": "Object.entries(thing).flatMap(([key, val]) => findUnserializables(val)?.map(description => {\n  description.path.unshift(key);\n  return description;\n}))",
          "statusReason": "Cannot read properties of undefined (reading 'path')",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["24"],
          "coveredBy": ["14", "16", "24", "25", "26"],
          "location": {
            "end": {
              "column": 28,
              "line": 50
            },
            "start": {
              "column": 24,
              "line": 43
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@43:19-47:14\nArrowFunction: () => undefined",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "statusReason": "expected undefined to deeply equal [ 'symbol' ]",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["25"],
          "coveredBy": ["14", "16", "24", "25", "26"],
          "location": {
            "end": {
              "column": 15,
              "line": 48
            },
            "start": {
              "column": 20,
              "line": 44
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@44:12-44:41\nOptionalChaining: findUnserializables(val).map",
          "mutatorName": "OptionalChaining",
          "replacement": "findUnserializables(val).map",
          "statusReason": "Cannot read properties of undefined (reading 'map')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["24"],
          "coveredBy": ["24", "25", "26"],
          "location": {
            "end": {
              "column": 42,
              "line": 45
            },
            "start": {
              "column": 13,
              "line": 45
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@44:59-47:13\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to deeply equal [ 'symbol' ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["25"],
          "coveredBy": ["25", "26"],
          "location": {
            "end": {
              "column": 14,
              "line": 48
            },
            "start": {
              "column": 60,
              "line": 45
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@52:29-52:74\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected 'Value is an instance of \"true\", this …' to equal 'Value is an instance of \"Person\", thi…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["30"],
          "coveredBy": ["23", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 75,
              "line": 53
            },
            "start": {
              "column": 30,
              "line": 53
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@52:29-52:74\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected 'Value is an instance of \"false\", this…' to equal 'Value is an instance of \"Person\", thi…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["30"],
          "coveredBy": ["23", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 75,
              "line": 53
            },
            "start": {
              "column": 30,
              "line": 53
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@52:29-52:74\nLogicalOperator: thing.constructor.name && '<anonymous class>'",
          "mutatorName": "LogicalOperator",
          "replacement": "thing.constructor.name && '<anonymous class>'",
          "statusReason": "expected 'Value is an instance of \"<anonymous c…' to equal 'Value is an instance of \"Person\", thi…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["30"],
          "coveredBy": ["23", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 75,
              "line": 53
            },
            "start": {
              "column": 30,
              "line": 53
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@52:55-52:74\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'Value is an instance of \"\", this deta…' to equal 'Value is an instance of \"<anonymous c…'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["31"],
          "coveredBy": ["31"],
          "location": {
            "end": {
              "column": 75,
              "line": 53
            },
            "start": {
              "column": 56,
              "line": 53
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@53:13-58:7\nArrayDeclaration: []",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "statusReason": "Cannot read properties of undefined (reading 'reason')",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["30"],
          "coveredBy": ["23", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 8,
              "line": 59
            },
            "start": {
              "column": 14,
              "line": 54
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@54:8-57:9\nObjectLiteral: {}",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected undefined to equal 'Value is an instance of \"Person\", thi…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["30"],
          "coveredBy": ["23", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 10,
              "line": 58
            },
            "start": {
              "column": 9,
              "line": 55
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@55:16-55:18\nArrayDeclaration: [\"Stryker was here\"]",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[\"Stryker was here\"]",
          "status": "Survived",
          "testsCompleted": 5,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": [],
          "coveredBy": ["23", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 19,
              "line": 56
            },
            "start": {
              "column": 17,
              "line": 56
            }
          }
        },
        {
          "id": "src/find-unserializables.ts@56:18-56:126\nStringLiteral: ``",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '' to equal 'Value is an instance of \"Person\", thi…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/find-unserializables.ts",
          "killedBy": ["30"],
          "coveredBy": ["23", "30", "31", "32", "33"],
          "location": {
            "end": {
              "column": 127,
              "line": 57
            },
            "start": {
              "column": 19,
              "line": 57
            }
          }
        }
      ],
      "source": "import { notEmpty } from './not-empty.js';\n\nexport interface UnserializableDescription {\n  path: string[];\n  reason: string;\n}\n\nexport function findUnserializables(thing: unknown): UnserializableDescription[] | undefined {\n  switch (typeof thing) {\n    case 'number':\n      return !isFinite(thing) ? [{ reason: `Number value \\`${thing}\\` has no JSON representation`, path: [] }] : undefined;\n    case 'string':\n    case 'boolean':\n    case 'undefined':\n      return;\n    case 'bigint':\n    case 'function':\n    case 'symbol':\n      return [\n        {\n          path: [],\n          reason: `Primitive type \"${typeof thing}\" has no JSON representation`,\n        },\n      ];\n    case 'object':\n      // Either a plain object, null, array or instance of a class\n      if (thing === null) {\n        return;\n      }\n      if (Array.isArray(thing)) {\n        const things = thing\n          .flatMap((child, index) =>\n            findUnserializables(child)?.map((description) => {\n              description.path.unshift(index.toString());\n              return description;\n            })\n          )\n          .filter(notEmpty);\n        return things.length ? things : undefined;\n      }\n      const thingProto = Object.getPrototypeOf(thing);\n      if (thingProto === Object.prototype || thingProto === null) {\n        const things = Object.entries(thing)\n          .flatMap(([key, val]) =>\n            findUnserializables(val)?.map((description) => {\n              description.path.unshift(key);\n              return description;\n            })\n          )\n          .filter(notEmpty);\n        return things.length ? things : undefined;\n      }\n      const protoClassName = thing.constructor.name || '<anonymous class>';\n      return [\n        {\n          path: [],\n          reason: `Value is an instance of \"${protoClassName}\", this detail will get lost in translation during serialization`,\n        },\n      ];\n  }\n}\n"
    },
    "src/immutable.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "src/immutable.ts@21:55-48:1\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to deeply equal { foo: 'bar', baz: 42 }",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["36"],
          "coveredBy": ["35", "36", "37", "38", "39", "40", "41", "42", "43"],
          "location": {
            "end": {
              "column": 2,
              "line": 49
            },
            "start": {
              "column": 56,
              "line": 22
            }
          }
        },
        {
          "id": "src/immutable.ts@23:4-44:9\nConditionalExpression: case 'object':",
          "mutatorName": "ConditionalExpression",
          "replacement": "case 'object':",
          "statusReason": "expected { foo: 'bar', baz: 42 } to be frozen",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["36"],
          "coveredBy": ["35", "36", "37", "39", "40", "41", "42", "43"],
          "location": {
            "end": {
              "column": 10,
              "line": 45
            },
            "start": {
              "column": 5,
              "line": 24
            }
          }
        },
        {
          "id": "src/immutable.ts@23:9-23:17\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected { foo: 'bar', baz: 42 } to be frozen",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["36"],
          "coveredBy": ["35", "36", "37", "38", "39", "40", "41", "42", "43"],
          "location": {
            "end": {
              "column": 18,
              "line": 24
            },
            "start": {
              "column": 10,
              "line": 24
            }
          }
        },
        {
          "id": "src/immutable.ts@24:10-24:31\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "target.map is not a function",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["35"],
          "coveredBy": ["35", "36", "37", "39", "40", "41", "42", "43"],
          "location": {
            "end": {
              "column": 32,
              "line": 25
            },
            "start": {
              "column": 11,
              "line": 25
            }
          }
        },
        {
          "id": "src/immutable.ts@24:10-24:31\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected { '0': { foo: 'bar' }, …(1) } to be an instance of Array",
          "status": "Killed",
          "testsCompleted": 5,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["40"],
          "coveredBy": ["35", "36", "37", "39", "40", "41", "42", "43"],
          "location": {
            "end": {
              "column": 32,
              "line": 25
            },
            "start": {
              "column": 11,
              "line": 25
            }
          }
        },
        {
          "id": "src/immutable.ts@24:33-26:7\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected { '0': { foo: 'bar' }, …(1) } to be an instance of Array",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["40"],
          "coveredBy": ["40"],
          "location": {
            "end": {
              "column": 8,
              "line": 27
            },
            "start": {
              "column": 34,
              "line": 25
            }
          }
        },
        {
          "id": "src/immutable.ts@27:10-27:31\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "target.entries is not a function or its return value is not iterable",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["35"],
          "coveredBy": ["35", "36", "37", "39", "40", "41", "42", "43"],
          "location": {
            "end": {
              "column": 32,
              "line": 28
            },
            "start": {
              "column": 11,
              "line": 28
            }
          }
        },
        {
          "id": "src/immutable.ts@27:10-27:31\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected {} to have property 'length'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["41"],
          "coveredBy": ["35", "36", "37", "39", "40", "41", "42", "43"],
          "location": {
            "end": {
              "column": 32,
              "line": 28
            },
            "start": {
              "column": 11,
              "line": 28
            }
          }
        },
        {
          "id": "src/immutable.ts@27:33-29:7\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected {} to have property 'length'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["41"],
          "coveredBy": ["41"],
          "location": {
            "end": {
              "column": 8,
              "line": 30
            },
            "start": {
              "column": 34,
              "line": 28
            }
          }
        },
        {
          "id": "src/immutable.ts@30:10-30:34\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected {} to not be frozen",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["35"],
          "coveredBy": ["35", "36", "37", "39", "40", "41", "42", "43"],
          "location": {
            "end": {
              "column": 35,
              "line": 31
            },
            "start": {
              "column": 11,
              "line": 31
            }
          }
        },
        {
          "id": "src/immutable.ts@30:10-30:34\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected {} to be an instance of RegExp",
          "status": "Killed",
          "testsCompleted": 8,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["43"],
          "coveredBy": ["35", "36", "37", "39", "40", "41", "42", "43"],
          "location": {
            "end": {
              "column": 35,
              "line": 31
            },
            "start": {
              "column": 11,
              "line": 31
            }
          }
        },
        {
          "id": "src/immutable.ts@30:36-32:7\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected {} to be an instance of RegExp",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["43"],
          "coveredBy": ["43"],
          "location": {
            "end": {
              "column": 8,
              "line": 33
            },
            "start": {
              "column": 37,
              "line": 31
            }
          }
        },
        {
          "id": "src/immutable.ts@33:10-33:25\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected null to deeply equal { foo: 'bar', baz: 42 }",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["36"],
          "coveredBy": ["35", "36", "37", "39", "40", "41", "42"],
          "location": {
            "end": {
              "column": 26,
              "line": 34
            },
            "start": {
              "column": 11,
              "line": 34
            }
          }
        },
        {
          "id": "src/immutable.ts@33:10-33:25\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "Cannot convert undefined or null to object",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["37"],
          "coveredBy": ["35", "36", "37", "39", "40", "41", "42"],
          "location": {
            "end": {
              "column": 26,
              "line": 34
            },
            "start": {
              "column": 11,
              "line": 34
            }
          }
        },
        {
          "id": "src/immutable.ts@33:10-33:25\nEqualityOperator: target !== null",
          "mutatorName": "EqualityOperator",
          "replacement": "target !== null",
          "statusReason": "expected null to deeply equal { foo: 'bar', baz: 42 }",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["36"],
          "coveredBy": ["35", "36", "37", "39", "40", "41", "42"],
          "location": {
            "end": {
              "column": 26,
              "line": 34
            },
            "start": {
              "column": 11,
              "line": 34
            }
          }
        },
        {
          "id": "src/immutable.ts@33:27-35:7\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "Cannot convert undefined or null to object",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["37"],
          "coveredBy": ["37"],
          "location": {
            "end": {
              "column": 8,
              "line": 36
            },
            "start": {
              "column": 28,
              "line": 34
            }
          }
        },
        {
          "id": "src/immutable.ts@36:10-36:31\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "target.values is not a function or its return value is not iterable",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["35"],
          "coveredBy": ["35", "36", "39", "40", "41", "42"],
          "location": {
            "end": {
              "column": 32,
              "line": 37
            },
            "start": {
              "column": 11,
              "line": 37
            }
          }
        },
        {
          "id": "src/immutable.ts@36:10-36:31\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected {} to have property 'length'",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["42"],
          "coveredBy": ["35", "36", "39", "40", "41", "42"],
          "location": {
            "end": {
              "column": 32,
              "line": 37
            },
            "start": {
              "column": 11,
              "line": 37
            }
          }
        },
        {
          "id": "src/immutable.ts@36:33-38:7\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected {} to have property 'length'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["42"],
          "coveredBy": ["42"],
          "location": {
            "end": {
              "column": 8,
              "line": 39
            },
            "start": {
              "column": 34,
              "line": 37
            }
          }
        },
        {
          "id": "src/immutable.ts@39:27-44:7\nObjectLiteral: {}",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "expected {} to deeply equal { foo: 'bar', baz: 42 }",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["36"],
          "coveredBy": ["35", "36", "39", "40", "41", "42"],
          "location": {
            "end": {
              "column": 8,
              "line": 45
            },
            "start": {
              "column": 28,
              "line": 40
            }
          }
        },
        {
          "id": "src/immutable.ts@40:71-43:9\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected {} to deeply equal { foo: 'bar', baz: 42 }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["36"],
          "coveredBy": ["36", "39", "40", "41", "42"],
          "location": {
            "end": {
              "column": 10,
              "line": 44
            },
            "start": {
              "column": 72,
              "line": 41
            }
          }
        },
        {
          "id": "src/immutable.ts@45:4-46:36\nConditionalExpression: default:",
          "mutatorName": "ConditionalExpression",
          "replacement": "default:",
          "statusReason": "expected { foo: undefined, baz: undefined } to deeply equal { foo: 'bar', baz: 42 }",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/immutable.ts",
          "killedBy": ["36"],
          "coveredBy": ["36", "37", "38", "39", "40", "41", "42"],
          "location": {
            "end": {
              "column": 37,
              "line": 47
            },
            "start": {
              "column": 5,
              "line": 46
            }
          }
        }
      ],
      "source": "import { Primitive } from './primitive';\n\ntype ImmutablePrimitive = Primitive | ((...args: any[]) => any);\n\nexport type Immutable<T> = T extends ImmutablePrimitive\n  ? T\n  : T extends Array<infer U>\n  ? ImmutableArray<U>\n  : T extends Map<infer K, infer V>\n  ? ImmutableMap<K, V>\n  : T extends Set<infer M>\n  ? ImmutableSet<M>\n  : T extends RegExp\n  ? Readonly<RegExp>\n  : ImmutableObject<T>;\n\nexport type ImmutableArray<T> = ReadonlyArray<Immutable<T>>;\nexport type ImmutableMap<K, V> = ReadonlyMap<Immutable<K>, Immutable<V>>;\nexport type ImmutableSet<T> = ReadonlySet<Immutable<T>>;\nexport type ImmutableObject<T> = { readonly [K in keyof T]: Immutable<T[K]> };\n\nexport function deepFreeze<T>(target: T): Immutable<T> {\n  switch (typeof target) {\n    case 'object':\n      if (Array.isArray(target)) {\n        return Object.freeze((target as any[]).map(deepFreeze)) as Immutable<T>;\n      }\n      if (target instanceof Map) {\n        return Object.freeze(new Map([...target.entries()].map(([k, v]) => [deepFreeze(k), deepFreeze(v)]))) as unknown as Immutable<T>;\n      }\n      if (target instanceof RegExp) {\n        return Object.freeze(target) as Immutable<T>;\n      }\n      if (target === null) {\n        return null as Immutable<T>;\n      }\n      if (target instanceof Set) {\n        return Object.freeze(new Set([...target.values()].map(deepFreeze))) as unknown as Immutable<T>;\n      }\n      return Object.freeze({\n        ...Object.entries(target).reduce<any>((result, [prop, val]) => {\n          result[prop] = deepFreeze(val);\n          return result;\n        }, {}),\n      });\n    default:\n      return target as Immutable<T>;\n  }\n}\n"
    },
    "src/noop-logger.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "src/noop-logger.ts@0:26-37:1\nObjectLiteral: {}",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "statusReason": "noopLogger.isTraceEnabled is not a function",
          "status": "Killed",
          "testsCompleted": 45,
          "static": false,
          "relativeFileName": "src/noop-logger.ts",
          "killedBy": ["44"],
          "coveredBy": ["44"],
          "location": {
            "end": {
              "column": 2,
              "line": 38
            },
            "start": {
              "column": 27,
              "line": 1
            }
          }
        },
        {
          "id": "src/noop-logger.ts@1:28-3:3\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be false",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/noop-logger.ts",
          "killedBy": ["44"],
          "coveredBy": ["44"],
          "location": {
            "end": {
              "column": 4,
              "line": 4
            },
            "start": {
              "column": 29,
              "line": 2
            }
          }
        },
        {
          "id": "src/noop-logger.ts@2:11-2:16\nBooleanLiteral: true",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/noop-logger.ts",
          "killedBy": ["44"],
          "coveredBy": ["44"],
          "location": {
            "end": {
              "column": 17,
              "line": 3
            },
            "start": {
              "column": 12,
              "line": 3
            }
          }
        },
        {
          "id": "src/noop-logger.ts@4:28-6:3\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be false",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/noop-logger.ts",
          "killedBy": ["44"],
          "coveredBy": ["44"],
          "location": {
            "end": {
              "column": 4,
              "line": 7
            },
            "start": {
              "column": 29,
              "line": 5
            }
          }
        },
        {
          "id": "src/noop-logger.ts@5:11-5:16\nBooleanLiteral: true",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/noop-logger.ts",
          "killedBy": ["44"],
          "coveredBy": ["44"],
          "location": {
            "end": {
              "column": 17,
              "line": 6
            },
            "start": {
              "column": 12,
              "line": 6
            }
          }
        },
        {
          "id": "src/noop-logger.ts@7:27-9:3\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be false",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/noop-logger.ts",
          "killedBy": ["44"],
          "coveredBy": ["44"],
          "location": {
            "end": {
              "column": 4,
              "line": 10
            },
            "start": {
              "column": 28,
              "line": 8
            }
          }
        },
        {
          "id": "src/noop-logger.ts@8:11-8:16\nBooleanLiteral: true",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/noop-logger.ts",
          "killedBy": ["44"],
          "coveredBy": ["44"],
          "location": {
            "end": {
              "column": 17,
              "line": 9
            },
            "start": {
              "column": 12,
              "line": 9
            }
          }
        },
        {
          "id": "src/noop-logger.ts@10:27-12:3\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be false",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/noop-logger.ts",
          "killedBy": ["44"],
          "coveredBy": ["44"],
          "location": {
            "end": {
              "column": 4,
              "line": 13
            },
            "start": {
              "column": 28,
              "line": 11
            }
          }
        },
        {
          "id": "src/noop-logger.ts@11:11-11:16\nBooleanLiteral: true",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/noop-logger.ts",
          "killedBy": ["44"],
          "coveredBy": ["44"],
          "location": {
            "end": {
              "column": 17,
              "line": 12
            },
            "start": {
              "column": 12,
              "line": 12
            }
          }
        },
        {
          "id": "src/noop-logger.ts@13:28-15:3\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be false",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/noop-logger.ts",
          "killedBy": ["44"],
          "coveredBy": ["44"],
          "location": {
            "end": {
              "column": 4,
              "line": 16
            },
            "start": {
              "column": 29,
              "line": 14
            }
          }
        },
        {
          "id": "src/noop-logger.ts@14:11-14:16\nBooleanLiteral: true",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/noop-logger.ts",
          "killedBy": ["44"],
          "coveredBy": ["44"],
          "location": {
            "end": {
              "column": 17,
              "line": 15
            },
            "start": {
              "column": 12,
              "line": 15
            }
          }
        },
        {
          "id": "src/noop-logger.ts@16:28-18:3\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be false",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/noop-logger.ts",
          "killedBy": ["44"],
          "coveredBy": ["44"],
          "location": {
            "end": {
              "column": 4,
              "line": 19
            },
            "start": {
              "column": 29,
              "line": 17
            }
          }
        },
        {
          "id": "src/noop-logger.ts@17:11-17:16\nBooleanLiteral: true",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/noop-logger.ts",
          "killedBy": ["44"],
          "coveredBy": ["44"],
          "location": {
            "end": {
              "column": 17,
              "line": 18
            },
            "start": {
              "column": 12,
              "line": 18
            }
          }
        }
      ],
      "source": "export const noopLogger = {\n  isTraceEnabled(): boolean {\n    return false;\n  },\n  isDebugEnabled(): boolean {\n    return false;\n  },\n  isInfoEnabled(): boolean {\n    return false;\n  },\n  isWarnEnabled(): boolean {\n    return false;\n  },\n  isErrorEnabled(): boolean {\n    return false;\n  },\n  isFatalEnabled(): boolean {\n    return false;\n  },\n  trace(): void {\n    // noop\n  },\n  debug(): void {\n    // noop\n  },\n  info(): void {\n    // noop\n  },\n  warn(): void {\n    // noop\n  },\n  error(): void {\n    // noop\n  },\n  fatal(): void {\n    // noop\n  },\n};\n"
    },
    "src/not-empty.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "src/not-empty.ts@0:67-2:1\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to deeply equal [ 'symbol' ]",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/not-empty.ts",
          "killedBy": ["25"],
          "coveredBy": ["24", "25", "26", "27", "28", "46", "47", "48"],
          "location": {
            "end": {
              "column": 2,
              "line": 3
            },
            "start": {
              "column": 68,
              "line": 1
            }
          }
        },
        {
          "id": "src/not-empty.ts@1:9-1:44\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'path')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/not-empty.ts",
          "killedBy": ["24"],
          "coveredBy": ["24", "25", "26", "27", "28", "46", "47", "48"],
          "location": {
            "end": {
              "column": 45,
              "line": 2
            },
            "start": {
              "column": 10,
              "line": 2
            }
          }
        },
        {
          "id": "src/not-empty.ts@1:9-1:44\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "statusReason": "expected undefined to deeply equal [ 'symbol' ]",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/not-empty.ts",
          "killedBy": ["25"],
          "coveredBy": ["24", "25", "26", "27", "28", "46", "47", "48"],
          "location": {
            "end": {
              "column": 45,
              "line": 2
            },
            "start": {
              "column": 10,
              "line": 2
            }
          }
        },
        {
          "id": "src/not-empty.ts@1:9-1:44\nLogicalOperator: item !== undefined || item !== null",
          "mutatorName": "LogicalOperator",
          "replacement": "item !== undefined || item !== null",
          "statusReason": "Cannot read properties of undefined (reading 'path')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/not-empty.ts",
          "killedBy": ["24"],
          "coveredBy": ["24", "25", "26", "27", "28", "46", "47", "48"],
          "location": {
            "end": {
              "column": 45,
              "line": 2
            },
            "start": {
              "column": 10,
              "line": 2
            }
          }
        },
        {
          "id": "src/not-empty.ts@1:9-1:27\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "Cannot read properties of undefined (reading 'path')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/not-empty.ts",
          "killedBy": ["24"],
          "coveredBy": ["24", "25", "26", "27", "28", "46", "47", "48"],
          "location": {
            "end": {
              "column": 28,
              "line": 2
            },
            "start": {
              "column": 10,
              "line": 2
            }
          }
        },
        {
          "id": "src/not-empty.ts@1:9-1:27\nEqualityOperator: item === undefined",
          "mutatorName": "EqualityOperator",
          "replacement": "item === undefined",
          "statusReason": "Cannot read properties of undefined (reading 'path')",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/not-empty.ts",
          "killedBy": ["24"],
          "coveredBy": ["24", "25", "26", "27", "28", "46", "47", "48"],
          "location": {
            "end": {
              "column": 28,
              "line": 2
            },
            "start": {
              "column": 10,
              "line": 2
            }
          }
        },
        {
          "id": "src/not-empty.ts@1:31-1:44\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "statusReason": "expected true to be false",
          "status": "Killed",
          "testsCompleted": 6,
          "static": false,
          "relativeFileName": "src/not-empty.ts",
          "killedBy": ["47"],
          "coveredBy": ["25", "26", "27", "28", "46", "47"],
          "location": {
            "end": {
              "column": 45,
              "line": 2
            },
            "start": {
              "column": 32,
              "line": 2
            }
          }
        },
        {
          "id": "src/not-empty.ts@1:31-1:44\nEqualityOperator: item === null",
          "mutatorName": "EqualityOperator",
          "replacement": "item === null",
          "statusReason": "expected undefined to deeply equal [ 'symbol' ]",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/not-empty.ts",
          "killedBy": ["25"],
          "coveredBy": ["25", "26", "27", "28", "46", "47"],
          "location": {
            "end": {
              "column": 45,
              "line": 2
            },
            "start": {
              "column": 32,
              "line": 2
            }
          }
        }
      ],
      "source": "export function notEmpty<T>(item: T | null | undefined): item is T {\n  return item !== undefined && item !== null;\n}\n"
    },
    "src/platform.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "src/platform.ts@0:24-9:1\nObjectLiteral: {}",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "Survived",
          "testsCompleted": 109,
          "static": false,
          "relativeFileName": "src/platform.ts",
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 10
            },
            "start": {
              "column": 25,
              "line": 1
            }
          }
        },
        {
          "id": "src/platform.ts@6:29-8:3\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "relativeFileName": "src/platform.ts",
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 4,
              "line": 9
            },
            "start": {
              "column": 30,
              "line": 7
            }
          }
        },
        {
          "id": "src/platform.ts@7:11-7:38\nConditionalExpression: true",
          "mutatorName": "ConditionalExpression",
          "replacement": "true",
          "status": "NoCoverage",
          "static": false,
          "relativeFileName": "src/platform.ts",
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 8
            },
            "start": {
              "column": 12,
              "line": 8
            }
          }
        },
        {
          "id": "src/platform.ts@7:11-7:38\nConditionalExpression: false",
          "mutatorName": "ConditionalExpression",
          "replacement": "false",
          "status": "NoCoverage",
          "static": false,
          "relativeFileName": "src/platform.ts",
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 8
            },
            "start": {
              "column": 12,
              "line": 8
            }
          }
        },
        {
          "id": "src/platform.ts@7:11-7:38\nEqualityOperator: process.platform == 'win32'",
          "mutatorName": "EqualityOperator",
          "replacement": "process.platform == 'win32'",
          "status": "NoCoverage",
          "static": false,
          "relativeFileName": "src/platform.ts",
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 8
            },
            "start": {
              "column": 12,
              "line": 8
            }
          }
        },
        {
          "id": "src/platform.ts@7:31-7:38\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "NoCoverage",
          "static": false,
          "relativeFileName": "src/platform.ts",
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 39,
              "line": 8
            },
            "start": {
              "column": 32,
              "line": 8
            }
          }
        }
      ],
      "source": "export const platform = {\n  /**\n   * Tells whether the filesystem is case sensitive.\n   *\n   * @returns false on Win32, true elsewhere\n   */\n  caseSensitiveFs(): boolean {\n    return process.platform != 'win32';\n  },\n};\n"
    },
    "src/require-resolve.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "src/require-resolve.ts@6:74-9:1\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "relativeFileName": "src/require-resolve.ts",
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 2,
              "line": 10
            },
            "start": {
              "column": 75,
              "line": 7
            }
          }
        },
        {
          "id": "src/require-resolve.ts@8:37-8:54\nObjectLiteral: {}",
          "mutatorName": "ObjectLiteral",
          "replacement": "{}",
          "status": "NoCoverage",
          "static": false,
          "relativeFileName": "src/require-resolve.ts",
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 55,
              "line": 9
            },
            "start": {
              "column": 38,
              "line": 9
            }
          }
        },
        {
          "id": "src/require-resolve.ts@8:46-8:52\nArrayDeclaration: []",
          "mutatorName": "ArrayDeclaration",
          "replacement": "[]",
          "status": "NoCoverage",
          "static": false,
          "relativeFileName": "src/require-resolve.ts",
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 53,
              "line": 9
            },
            "start": {
              "column": 47,
              "line": 9
            }
          }
        }
      ],
      "source": "import { createRequire } from 'module';\n\n/**\n * Require a module from the current working directory (or a different base dir)\n * @see https://nodejs.org/api/modules.html#modules_require_resolve_paths_request\n */\nexport function requireResolve(id: string, from = process.cwd()): unknown {\n  const require = createRequire(import.meta.url);\n  return require(require.resolve(id, { paths: [from] }));\n}\n"
    },
    "src/string-utils.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "src/string-utils.ts@9:58-11:1\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to equal 'foo bar baz'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/string-utils.ts",
          "killedBy": ["49"],
          "coveredBy": ["49", "50", "51"],
          "location": {
            "end": {
              "column": 2,
              "line": 12
            },
            "start": {
              "column": 59,
              "line": 10
            }
          }
        },
        {
          "id": "src/string-utils.ts@10:9-10:40\nMethodExpression: str.replace(/\\s+/g, ' ')",
          "mutatorName": "MethodExpression",
          "replacement": "str.replace(/\\s+/g, ' ')",
          "status": "Survived",
          "testsCompleted": 3,
          "static": false,
          "relativeFileName": "src/string-utils.ts",
          "killedBy": [],
          "coveredBy": ["49", "50", "51"],
          "location": {
            "end": {
              "column": 41,
              "line": 11
            },
            "start": {
              "column": 10,
              "line": 11
            }
          }
        },
        {
          "id": "src/string-utils.ts@10:21-10:27\nRegex: /\\s/g",
          "mutatorName": "Regex",
          "replacement": "/\\s/g",
          "statusReason": "expected 'foo  bar   baz' to equal 'foo bar baz'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/string-utils.ts",
          "killedBy": ["50"],
          "coveredBy": ["49", "50", "51"],
          "location": {
            "end": {
              "column": 28,
              "line": 11
            },
            "start": {
              "column": 22,
              "line": 11
            }
          }
        },
        {
          "id": "src/string-utils.ts@10:21-10:27\nRegex: /\\S+/g",
          "mutatorName": "Regex",
          "replacement": "/\\S+/g",
          "statusReason": "expected '' to equal 'foo bar baz'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/string-utils.ts",
          "killedBy": ["49"],
          "coveredBy": ["49", "50", "51"],
          "location": {
            "end": {
              "column": 28,
              "line": 11
            },
            "start": {
              "column": 22,
              "line": 11
            }
          }
        },
        {
          "id": "src/string-utils.ts@10:29-10:32\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'foobarbaz' to equal 'foo bar baz'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/string-utils.ts",
          "killedBy": ["49"],
          "coveredBy": ["49", "50", "51"],
          "location": {
            "end": {
              "column": 33,
              "line": 11
            },
            "start": {
              "column": 30,
              "line": 11
            }
          }
        },
        {
          "id": "src/string-utils.ts@16:59-18:1\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to equal 'lorum ipsum'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/string-utils.ts",
          "killedBy": ["52"],
          "coveredBy": ["52", "53", "54", "55"],
          "location": {
            "end": {
              "column": 2,
              "line": 19
            },
            "start": {
              "column": 60,
              "line": 17
            }
          }
        },
        {
          "id": "src/string-utils.ts@17:31-17:35\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'lorumipsum' to equal 'lorum\\nipsum\\n'",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "relativeFileName": "src/string-utils.ts",
          "killedBy": ["55"],
          "coveredBy": ["52", "53", "54", "55"],
          "location": {
            "end": {
              "column": 36,
              "line": 18
            },
            "start": {
              "column": 32,
              "line": 18
            }
          }
        },
        {
          "id": "src/string-utils.ts@34:60-37:1\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "propertyPath(...) is not a function",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/string-utils.ts",
          "killedBy": ["56"],
          "coveredBy": ["56", "57", "58", "59", "60"],
          "location": {
            "end": {
              "column": 2,
              "line": 38
            },
            "start": {
              "column": 61,
              "line": 35
            }
          }
        },
        {
          "id": "src/string-utils.ts@42:59-44:1\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to equal 'something normal'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/string-utils.ts",
          "killedBy": ["61"],
          "coveredBy": ["61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77"],
          "location": {
            "end": {
              "column": 2,
              "line": 45
            },
            "start": {
              "column": 60,
              "line": 43
            }
          }
        },
        {
          "id": "src/string-utils.ts@43:23-43:47\nRegex: /[^.*+\\-?^${}()|[\\]\\\\/]/g",
          "mutatorName": "Regex",
          "replacement": "/[^.*+\\-?^${}()|[\\]\\\\/]/g",
          "statusReason": "expected '\\s\\o\\m\\e\\t\\h\\i\\n\\g\\ \\n\\o\\r\\m\\a\\l' to equal 'something normal'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/string-utils.ts",
          "killedBy": ["61"],
          "coveredBy": ["61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77"],
          "location": {
            "end": {
              "column": 48,
              "line": 44
            },
            "start": {
              "column": 24,
              "line": 44
            }
          }
        },
        {
          "id": "src/string-utils.ts@43:49-43:55\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to equal '\\.'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/string-utils.ts",
          "killedBy": ["62"],
          "coveredBy": ["61", "62", "63", "64", "65", "66", "67", "68", "69", "70", "71", "72", "73", "74", "75", "76", "77"],
          "location": {
            "end": {
              "column": 56,
              "line": 44
            },
            "start": {
              "column": 50,
              "line": 44
            }
          }
        },
        {
          "id": "src/string-utils.ts@49:52-51:1\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to equal 'something normal'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/string-utils.ts",
          "killedBy": ["78"],
          "coveredBy": ["78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94"],
          "location": {
            "end": {
              "column": 2,
              "line": 52
            },
            "start": {
              "column": 53,
              "line": 50
            }
          }
        },
        {
          "id": "src/string-utils.ts@50:23-50:46\nRegex: /[^.*+\\-?^${}()|[\\]\\\\]/g",
          "mutatorName": "Regex",
          "replacement": "/[^.*+\\-?^${}()|[\\]\\\\]/g",
          "statusReason": "expected '\\s\\o\\m\\e\\t\\h\\i\\n\\g\\ \\n\\o\\r\\m\\a\\l' to equal 'something normal'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/string-utils.ts",
          "killedBy": ["78"],
          "coveredBy": ["78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94"],
          "location": {
            "end": {
              "column": 47,
              "line": 51
            },
            "start": {
              "column": 24,
              "line": 51
            }
          }
        },
        {
          "id": "src/string-utils.ts@50:48-50:54\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected '' to equal '\\.'",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "relativeFileName": "src/string-utils.ts",
          "killedBy": ["80"],
          "coveredBy": ["78", "79", "80", "81", "82", "83", "84", "85", "86", "87", "88", "89", "90", "91", "92", "93", "94"],
          "location": {
            "end": {
              "column": 55,
              "line": 51
            },
            "start": {
              "column": 49,
              "line": 51
            }
          }
        },
        {
          "id": "src/string-utils.ts@56:60-58:1\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to equal 'test/util/foo.spec.js'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/string-utils.ts",
          "killedBy": ["95"],
          "coveredBy": ["95", "96"],
          "location": {
            "end": {
              "column": 2,
              "line": 59
            },
            "start": {
              "column": 61,
              "line": 57
            }
          }
        },
        {
          "id": "src/string-utils.ts@57:33-57:36\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "statusReason": "expected 'testutilfoo.spec.js' to equal 'test/util/foo.spec.js'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/string-utils.ts",
          "killedBy": ["95"],
          "coveredBy": ["95", "96"],
          "location": {
            "end": {
              "column": 37,
              "line": 58
            },
            "start": {
              "column": 34,
              "line": 58
            }
          }
        }
      ],
      "source": "import { KnownKeys } from './known-keys';\nimport { Primitive } from './primitive';\n\ntype OnlyObject<T> = Exclude<T, Primitive>;\n\n/**\n * Consolidates multiple consecutive white spaces into a single space.\n * @param str The string to be normalized\n */\nexport function normalizeWhitespaces(str: string): string {\n  return str.replace(/\\s+/g, ' ').trim();\n}\n\n/**\n * Normalizes line endings as unix style.\n */\nexport function normalizeLineEndings(text: string): string {\n  return text.replace(/\\r\\n/g, '\\n');\n}\n\nexport interface PropertyPathOverloads<T> {\n  (key: KnownKeys<T>): string;\n  <TProp1 extends KnownKeys<T>>(key: TProp1, key2: KnownKeys<OnlyObject<T[TProp1]>>): string;\n  <TProp1 extends KnownKeys<T>, TProp2 extends KnownKeys<OnlyObject<T[TProp1]>>>(\n    key: TProp1,\n    key2: TProp2,\n    key3: KnownKeys<OnlyObject<OnlyObject<T[TProp1]>[TProp2]>>\n  ): string;\n}\n\n/**\n * Given a base type, allows type safe access to the name of a property.\n * @param prop The property name\n */\nexport function propertyPath<T>(): PropertyPathOverloads<T> {\n  const fn: PropertyPathOverloads<T> = ((...args: string[]) => args.join('.')) as unknown as PropertyPathOverloads<T>;\n  return fn;\n}\n\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\n */\nexport function escapeRegExpLiteral(input: string): string {\n  return input.replace(/[.*+\\-?^${}()|[\\]\\\\/]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n/**\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions#Escaping\n */\nexport function escapeRegExp(input: string): string {\n  return input.replace(/[.*+\\-?^${}()|[\\]\\\\]/g, '\\\\$&'); // $& means the whole matched string\n}\n\n/**\n * Normalizes relative or absolute file names to be in posix format (forward slashes '/')\n */\nexport function normalizeFileName(fileName: string): string {\n  return fileName.replace(/\\\\/g, '/');\n}\n"
    },
    "src/stryker-error.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "src/stryker-error.ts@4:10-4:88\nStringLiteral: ``",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected '' to equal 'some message. Inner error: Error: \\nE…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/stryker-error.ts",
          "killedBy": ["98"],
          "coveredBy": ["97", "98", "99"],
          "location": {
            "end": {
              "column": 89,
              "line": 5
            },
            "start": {
              "column": 11,
              "line": 5
            }
          }
        },
        {
          "id": "src/stryker-error.ts@4:36-4:81\nStringLiteral: ``",
          "mutatorName": "StringLiteral",
          "replacement": "``",
          "statusReason": "expected 'some message' to equal 'some message. Inner error: Error: \\nE…'",
          "status": "Killed",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/stryker-error.ts",
          "killedBy": ["98"],
          "coveredBy": ["97", "98"],
          "location": {
            "end": {
              "column": 82,
              "line": 5
            },
            "start": {
              "column": 37,
              "line": 5
            }
          }
        },
        {
          "id": "src/stryker-error.ts@4:84-4:86\nStringLiteral: \"Stryker was here!\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"Stryker was here!\"",
          "statusReason": "expected 'foo barStryker was here!' to equal 'foo bar'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/stryker-error.ts",
          "killedBy": ["99"],
          "coveredBy": ["99"],
          "location": {
            "end": {
              "column": 87,
              "line": 5
            },
            "start": {
              "column": 85,
              "line": 5
            }
          }
        }
      ],
      "source": "import { errorToString } from './errors.js';\n\nexport class StrykerError extends Error {\n  constructor(message: string, public readonly innerError?: unknown) {\n    super(`${message}${innerError ? `. Inner error: ${errorToString(innerError)}` : ''}`);\n  }\n}\n"
    },
    "src/task.ts": {
      "language": "typescript",
      "mutants": [
        {
          "id": "src/task.ts@7:25-7:30\nBooleanLiteral: true",
          "mutatorName": "BooleanLiteral",
          "replacement": "true",
          "statusReason": "expected true to be false",
          "status": "Killed",
          "testsCompleted": 4,
          "static": false,
          "relativeFileName": "src/task.ts",
          "killedBy": ["103"],
          "coveredBy": ["100", "101", "102", "103", "104", "105", "106", "107"],
          "location": {
            "end": {
              "column": 31,
              "line": 8
            },
            "start": {
              "column": 26,
              "line": 8
            }
          }
        },
        {
          "id": "src/task.ts@9:16-14:3\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be an instance of Promise",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/task.ts",
          "killedBy": ["100"],
          "coveredBy": ["100", "101", "102", "103", "104", "105", "106", "107"],
          "location": {
            "end": {
              "column": 4,
              "line": 15
            },
            "start": {
              "column": 17,
              "line": 10
            }
          }
        },
        {
          "id": "src/task.ts@10:56-13:5\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "this.resolveFn is not a function",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/task.ts",
          "killedBy": ["100"],
          "coveredBy": ["100", "101", "102", "103", "104", "105", "106", "107"],
          "location": {
            "end": {
              "column": 6,
              "line": 14
            },
            "start": {
              "column": 57,
              "line": 11
            }
          }
        },
        {
          "id": "src/task.ts@16:35-18:3\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be an instance of Promise",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/task.ts",
          "killedBy": ["100"],
          "coveredBy": ["100", "101", "102", "104", "105", "106", "107"],
          "location": {
            "end": {
              "column": 4,
              "line": 19
            },
            "start": {
              "column": 36,
              "line": 17
            }
          }
        },
        {
          "id": "src/task.ts@20:36-22:3\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to be false",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/task.ts",
          "killedBy": ["103"],
          "coveredBy": ["103"],
          "location": {
            "end": {
              "column": 4,
              "line": 23
            },
            "start": {
              "column": 37,
              "line": 21
            }
          }
        },
        {
          "id": "src/task.ts@24:57-27:3\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "relativeFileName": "src/task.ts",
          "killedBy": [],
          "coveredBy": ["100", "101", "103", "105", "107"],
          "location": {
            "end": {
              "column": 4,
              "line": 28
            },
            "start": {
              "column": 58,
              "line": 25
            }
          }
        },
        {
          "id": "src/task.ts@25:24-25:28\nBooleanLiteral: false",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "statusReason": "expected false to be true",
          "status": "Killed",
          "testsCompleted": 3,
          "static": false,
          "relativeFileName": "src/task.ts",
          "killedBy": ["103"],
          "coveredBy": ["100", "101", "103", "105", "107"],
          "location": {
            "end": {
              "column": 29,
              "line": 26
            },
            "start": {
              "column": 25,
              "line": 26
            }
          }
        },
        {
          "id": "src/task.ts@29:64-32:3\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "relativeFileName": "src/task.ts",
          "killedBy": [],
          "coveredBy": ["102", "106"],
          "location": {
            "end": {
              "column": 4,
              "line": 33
            },
            "start": {
              "column": 65,
              "line": 30
            }
          }
        },
        {
          "id": "src/task.ts@30:24-30:28\nBooleanLiteral: false",
          "mutatorName": "BooleanLiteral",
          "replacement": "false",
          "status": "Survived",
          "testsCompleted": 2,
          "static": false,
          "relativeFileName": "src/task.ts",
          "killedBy": [],
          "coveredBy": ["102", "106"],
          "location": {
            "end": {
              "column": 29,
              "line": 31
            },
            "start": {
              "column": 25,
              "line": 31
            }
          }
        },
        {
          "id": "src/task.ts@39:64-39:80\nStringLiteral: \"\"",
          "mutatorName": "StringLiteral",
          "replacement": "\"\"",
          "status": "Survived",
          "testsCompleted": 109,
          "static": false,
          "relativeFileName": "src/task.ts",
          "killedBy": [],
          "coveredBy": [],
          "location": {
            "end": {
              "column": 81,
              "line": 40
            },
            "start": {
              "column": 65,
              "line": 40
            }
          }
        },
        {
          "id": "src/task.ts@46:110-60:3\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected undefined to equal Symbol(TimeoutExpired)",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/task.ts",
          "killedBy": ["104"],
          "coveredBy": ["104", "105", "106", "107", "108"],
          "location": {
            "end": {
              "column": 4,
              "line": 61
            },
            "start": {
              "column": 111,
              "line": 47
            }
          }
        },
        {
          "id": "src/task.ts@47:85-58:5\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "status": "Timeout",
          "static": false,
          "relativeFileName": "src/task.ts",
          "killedBy": [],
          "coveredBy": ["104", "105", "106", "107", "108"],
          "location": {
            "end": {
              "column": 6,
              "line": 59
            },
            "start": {
              "column": 86,
              "line": 48
            }
          }
        },
        {
          "id": "src/task.ts@48:31-48:70\nArrowFunction: () => undefined",
          "mutatorName": "ArrowFunction",
          "replacement": "() => undefined",
          "status": "Timeout",
          "static": false,
          "relativeFileName": "src/task.ts",
          "killedBy": [],
          "coveredBy": ["104", "105", "106", "107", "108"],
          "location": {
            "end": {
              "column": 71,
              "line": 49
            },
            "start": {
              "column": 32,
              "line": 49
            }
          }
        },
        {
          "id": "src/task.ts@50:26-53:9\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected Symbol(TimeoutExpired) to equal 'in time'",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/task.ts",
          "killedBy": ["105"],
          "coveredBy": ["105", "107", "108"],
          "location": {
            "end": {
              "column": 10,
              "line": 54
            },
            "start": {
              "column": 27,
              "line": 51
            }
          }
        },
        {
          "id": "src/task.ts@54:26-57:9\nBlockStatement: {}",
          "mutatorName": "BlockStatement",
          "replacement": "{}",
          "statusReason": "expected promise to be rejected with 'Error: expected error' but it was fulfilled with Symbol(TimeoutExpired)",
          "status": "Killed",
          "testsCompleted": 1,
          "static": false,
          "relativeFileName": "src/task.ts",
          "killedBy": ["106"],
          "coveredBy": ["106"],
          "location": {
            "end": {
              "column": 10,
              "line": 58
            },
            "start": {
              "column": 27,
              "line": 55
            }
          }
        }
      ],
      "source": "/**\n * Wraps a promise in a Task api for convenience.\n */\nexport class Task<T = void> {\n  protected _promise: Promise<T>;\n  private resolveFn!: (value: PromiseLike<T> | T) => void;\n  private rejectFn!: (reason: any) => void;\n  private _isCompleted = false;\n\n  constructor() {\n    this._promise = new Promise<T>((resolve, reject) => {\n      this.resolveFn = resolve;\n      this.rejectFn = reject;\n    });\n  }\n\n  public get promise(): Promise<T> {\n    return this._promise;\n  }\n\n  public get isCompleted(): boolean {\n    return this._isCompleted;\n  }\n\n  public resolve = (result: PromiseLike<T> | T): void => {\n    this._isCompleted = true;\n    this.resolveFn(result);\n  };\n\n  public reject: (reason: any) => void = (reason: any): void => {\n    this._isCompleted = true;\n    this.rejectFn(reason);\n  };\n}\n\n/**\n * A task that can expire after the given time.\n */\nexport class ExpirableTask<T = void> extends Task<T | typeof ExpirableTask.TimeoutExpired> {\n  public static readonly TimeoutExpired: unique symbol = Symbol('TimeoutExpired');\n\n  constructor(timeoutMS: number) {\n    super();\n    this._promise = ExpirableTask.timeout(this._promise, timeoutMS);\n  }\n\n  public static timeout<K>(promise: Promise<K>, ms: number): Promise<K | typeof ExpirableTask.TimeoutExpired> {\n    const sleep = new Promise<K | typeof ExpirableTask.TimeoutExpired>((res, rej) => {\n      const timer = setTimeout(() => res(ExpirableTask.TimeoutExpired), ms);\n      promise\n        .then((result) => {\n          clearTimeout(timer);\n          res(result);\n        })\n        .catch((error) => {\n          clearTimeout(timer);\n          rej(error);\n        });\n    });\n    return sleep;\n  }\n}\n"
    }
  },
  "schemaVersion": "1.0",
  "thresholds": {
    "high": 80,
    "low": 60,
    "break": null
  },
  "testFiles": {
    "dist/test/unit/child-process-as-promised.spec.js": {
      "tests": [
        {
          "id": "0",
          "name": "childProcessAsPromised should expose promisified exec"
        }
      ],
      "source": "import * as childProcess from 'child_process';\nimport { promisify } from 'util';\nimport { expect } from 'chai';\nimport { childProcessAsPromised } from '../../src/index.js';\ndescribe('childProcessAsPromised', () => {\n    it('should expose promisified exec', () => {\n        // It's difficult to test this any other way. At least this way, we know it is promisified.\n        expect(childProcessAsPromised.exec.toString()).eq(promisify(childProcess.exec).toString());\n    });\n});\n//# sourceMappingURL=child-process-as-promised.spec.js.map"
    },
    "dist/test/unit/deep-merge.spec.js": {
      "tests": [
        {
          "id": "1",
          "name": "deepMerge should merge overrides into the target object"
        },
        {
          "id": "2",
          "name": "deepMerge should deep merge overrides into the target object"
        },
        {
          "id": "3",
          "name": "deepMerge should override arrays without merging them"
        },
        {
          "id": "4",
          "name": "deepMerge should not override with `undefined`"
        }
      ],
      "source": "import { expect } from 'chai';\nimport { deepMerge } from '../../src/deep-merge.js';\ndescribe(deepMerge.name, () => {\n    it('should merge overrides into the target object', () => {\n        // Arrange\n        const foo = { foo: 'bar' };\n        const baz = { baz: 42 };\n        // Act\n        deepMerge(foo, baz);\n        // Assert\n        expect(foo).deep.eq({ foo: 'bar', baz: 42 });\n    });\n    it('should deep merge overrides into the target object', () => {\n        // Arrange\n        const foo = { child: { foo: 'child' } };\n        const baz = { child: { baz: 42 } };\n        // Act\n        deepMerge(foo, baz);\n        // Assert\n        const expected = { child: { foo: 'child', baz: 42 } };\n        expect(foo).deep.eq(expected);\n    });\n    it('should override arrays without merging them', () => {\n        // Arrange\n        const foo = { qux: ['1', '2'] };\n        const baz = { qux: ['3'] };\n        // Act\n        deepMerge(foo, baz);\n        // Assert\n        const expected = { qux: ['3'] };\n        expect(foo).deep.eq(expected);\n    });\n    it('should not override with `undefined`', () => {\n        // Arrange\n        const foo = { foo: '1' };\n        const baz = { foo: undefined };\n        // Act\n        deepMerge(foo, baz);\n        // Assert\n        const expected = { foo: '1' };\n        expect(foo).deep.eq(expected);\n    });\n});\n//# sourceMappingURL=deep-merge.spec.js.map"
    },
    "dist/test/unit/errors.spec.js": {
      "tests": [
        {
          "id": "5",
          "name": "errors errorToString should return empty string if error is undefined"
        },
        {
          "id": "6",
          "name": "errors errorToString should convert a nodejs Errno error to string"
        },
        {
          "id": "7",
          "name": "errors errorToString should convert a regular error to string"
        },
        {
          "id": "8",
          "name": "errors errorToString should convert an error without a stack trace to string"
        }
      ],
      "source": "import { expect } from 'chai';\nimport { errorToString } from '../../src/errors.js';\ndescribe('errors', () => {\n    describe('errorToString', () => {\n        it('should return empty string if error is undefined', () => {\n            expect(errorToString(undefined)).eq('');\n        });\n        it('should convert a nodejs Errno error to string', () => {\n            const error = new Error('message');\n            error.code = 'foo';\n            error.errno = 20;\n            error.name = 'name';\n            error.path = 'bar';\n            error.stack = 'qux';\n            error.syscall = 'baz';\n            expect(errorToString(error)).eq('name: foo (baz) qux');\n        });\n        it('should convert a regular error to string', () => {\n            var _a;\n            const error = new Error('expected error');\n            expect(errorToString(error)).eq(`Error: expected error\\n${(_a = error.stack) === null || _a === void 0 ? void 0 : _a.toString()}`);\n        });\n        it('should convert an error without a stack trace to string', () => {\n            const error = new Error('expected error');\n            delete error.stack;\n            expect(errorToString(error)).eq('Error: expected error');\n        });\n    });\n});\n//# sourceMappingURL=errors.spec.js.map"
    },
    "dist/test/unit/find-unserializable.spec.js": {
      "tests": [
        {
          "id": "9",
          "name": "findUnserializables should mark 4 as serializable"
        },
        {
          "id": "10",
          "name": "findUnserializables should mark true as serializable"
        },
        {
          "id": "11",
          "name": "findUnserializables should mark undefined as serializable"
        },
        {
          "id": "12",
          "name": "findUnserializables should mark null as serializable"
        },
        {
          "id": "13",
          "name": "findUnserializables should mark \"str\" as serializable"
        },
        {
          "id": "14",
          "name": "findUnserializables should mark {} as serializable"
        },
        {
          "id": "15",
          "name": "findUnserializables should mark [] as serializable"
        },
        {
          "id": "16",
          "name": "findUnserializables should mark plain object without a prototype as serializable"
        },
        {
          "id": "17",
          "name": "findUnserializables should mark primitive type symbol as unserializable"
        },
        {
          "id": "18",
          "name": "findUnserializables should mark primitive type bigint as unserializable"
        },
        {
          "id": "19",
          "name": "findUnserializables should mark primitive type function as unserializable"
        },
        {
          "id": "20",
          "name": "findUnserializables should mark number value NaN as unserializable"
        },
        {
          "id": "21",
          "name": "findUnserializables should mark number value Infinity as unserializable"
        },
        {
          "id": "22",
          "name": "findUnserializables should mark number value -Infinity as unserializable"
        },
        {
          "id": "23",
          "name": "findUnserializables should mark class instances as unserializable"
        },
        {
          "id": "24",
          "name": "findUnserializables should mark the default stryker options as \"serializable\""
        },
        {
          "id": "25",
          "name": "findUnserializables path should be provided in a shallow object"
        },
        {
          "id": "26",
          "name": "findUnserializables path should be provided in a deep object"
        },
        {
          "id": "27",
          "name": "findUnserializables path should be provided in a shallow array"
        },
        {
          "id": "28",
          "name": "findUnserializables path should be provided in a deep array"
        },
        {
          "id": "29",
          "name": "findUnserializables reason should be provided for an unserializable primitive value"
        },
        {
          "id": "30",
          "name": "findUnserializables reason should be provided for a class instance"
        },
        {
          "id": "31",
          "name": "findUnserializables reason should be provided for an anonymous class instance"
        },
        {
          "id": "32",
          "name": "findUnserializables reason should be provided for a RegExp"
        },
        {
          "id": "33",
          "name": "findUnserializables reason should be provided for a Date"
        },
        {
          "id": "34",
          "name": "findUnserializables reason should be provided for unserializable numbers"
        }
      ],
      "source": "import { testInjector } from '@stryker-mutator/test-helpers';\nimport { expect } from 'chai';\nimport { findUnserializables } from '../../src/index.js';\ndescribe(findUnserializables.name, () => {\n    [4, true, undefined, null, 'str', {}, []].forEach((serializableValue) => {\n        it(`should mark ${serializableValue === undefined ? 'undefined' : JSON.stringify(serializableValue)} as serializable`, () => {\n            expect(findUnserializables(serializableValue)).undefined;\n        });\n    });\n    it('should mark plain object without a prototype as serializable', () => {\n        expect(findUnserializables(Object.create(null))).undefined;\n    });\n    [Symbol('symbol'), BigInt(42), it].forEach((unserializableValue) => {\n        it(`should mark primitive type ${typeof unserializableValue} as unserializable`, () => {\n            expect(findUnserializables(unserializableValue)).ok;\n        });\n    });\n    [NaN, Infinity, -Infinity].forEach((unserializableNumber) => {\n        it(`should mark number value ${unserializableNumber} as unserializable`, () => {\n            expect(findUnserializables(unserializableNumber)).ok;\n        });\n    });\n    it('should mark class instances as unserializable', () => {\n        class Person {\n        }\n        expect(findUnserializables(new Person())).ok;\n    });\n    it('should mark the default stryker options as \"serializable\"', () => {\n        expect(findUnserializables(testInjector.options)).undefined;\n    });\n    describe('path', () => {\n        it('should be provided in a shallow object', () => {\n            var _a;\n            expect((_a = findUnserializables({ symbol: Symbol(42) })) === null || _a === void 0 ? void 0 : _a[0].path).deep.eq(['symbol']);\n        });\n        it('should be provided in a deep object', () => {\n            var _a;\n            expect((_a = findUnserializables({ obj: { symbol: Symbol(42) } })) === null || _a === void 0 ? void 0 : _a[0].path).deep.eq(['obj', 'symbol']);\n        });\n        it('should be provided in a shallow array', () => {\n            var _a;\n            expect((_a = findUnserializables([Symbol(42)])) === null || _a === void 0 ? void 0 : _a[0].path).deep.eq(['0']);\n        });\n        it('should be provided in a deep array', () => {\n            var _a;\n            expect((_a = findUnserializables(['a', [Symbol(42)]])) === null || _a === void 0 ? void 0 : _a[0].path).deep.eq(['1', '0']);\n        });\n    });\n    describe('reason', () => {\n        it('should be provided for an unserializable primitive value', () => {\n            var _a;\n            expect((_a = findUnserializables(BigInt(42))) === null || _a === void 0 ? void 0 : _a[0].reason).eq('Primitive type \"bigint\" has no JSON representation');\n        });\n        it('should be provided for a class instance', () => {\n            var _a;\n            expect((_a = findUnserializables(new (class Person {\n            })())) === null || _a === void 0 ? void 0 : _a[0].reason).eq('Value is an instance of \"Person\", this detail will get lost in translation during serialization');\n        });\n        it('should be provided for an anonymous class instance', () => {\n            var _a;\n            expect((_a = findUnserializables(new (class {\n            })())) === null || _a === void 0 ? void 0 : _a[0].reason).eq('Value is an instance of \"<anonymous class>\", this detail will get lost in translation during serialization');\n        });\n        it('should be provided for a RegExp', () => {\n            var _a;\n            expect((_a = findUnserializables(/regex/)) === null || _a === void 0 ? void 0 : _a[0].reason).eq('Value is an instance of \"RegExp\", this detail will get lost in translation during serialization');\n        });\n        it('should be provided for a Date', () => {\n            var _a;\n            expect((_a = findUnserializables(new Date(2010, 1, 1))) === null || _a === void 0 ? void 0 : _a[0].reason).eq('Value is an instance of \"Date\", this detail will get lost in translation during serialization');\n        });\n        it('should be provided for unserializable numbers', () => {\n            var _a;\n            expect((_a = findUnserializables(NaN)) === null || _a === void 0 ? void 0 : _a[0].reason).eq('Number value `NaN` has no JSON representation');\n        });\n    });\n});\n//# sourceMappingURL=find-unserializable.spec.js.map"
    },
    "dist/test/unit/immutable.spec.js": {
      "tests": [
        {
          "id": "35",
          "name": "deepFreeze should not change the input object"
        },
        {
          "id": "36",
          "name": "deepFreeze should freeze objects"
        },
        {
          "id": "37",
          "name": "deepFreeze should work for `null` and `undefined`"
        },
        {
          "id": "38",
          "name": "deepFreeze should work for primitives"
        },
        {
          "id": "39",
          "name": "deepFreeze should deeply freeze objects"
        },
        {
          "id": "40",
          "name": "deepFreeze should work for Arrays"
        },
        {
          "id": "41",
          "name": "deepFreeze should work for Maps"
        },
        {
          "id": "42",
          "name": "deepFreeze should work for Sets"
        },
        {
          "id": "43",
          "name": "deepFreeze should work for RegExps"
        }
      ],
      "source": "import { expect } from 'chai';\nimport { deepFreeze } from '../../src/immutable.js';\ndescribe(deepFreeze.name, () => {\n    it('should not change the input object', () => {\n        const input = {};\n        deepFreeze(input);\n        expect(input).not.frozen;\n    });\n    it('should freeze objects', () => {\n        const input = { foo: 'bar', baz: 42 };\n        const output = deepFreeze(input);\n        expect(output).frozen;\n        expect(output).deep.eq(input);\n        expect(output).not.eq(input);\n    });\n    it('should work for `null` and `undefined`', () => {\n        expect(deepFreeze(null)).eq(null);\n        expect(deepFreeze(undefined)).eq(undefined);\n    });\n    it('should work for primitives', () => {\n        const s = Symbol();\n        expect(deepFreeze(42)).eq(42);\n        expect(deepFreeze('foo')).eq('foo');\n        expect(deepFreeze(s)).eq(s);\n        expect(deepFreeze(true)).eq(true);\n    });\n    it('should deeply freeze objects', () => {\n        const input = {\n            foo: {\n                bar: {\n                    baz: 'qux',\n                },\n            },\n        };\n        const output = deepFreeze(input);\n        expect(output).deep.eq(input);\n        expect(output).frozen;\n        expect(output.foo).frozen;\n        expect(output.foo.bar).frozen;\n    });\n    it('should work for Arrays', () => {\n        const one = {\n            foo: 'bar',\n        };\n        const two = {\n            baz: 42,\n        };\n        const input = [one, two];\n        const output = deepFreeze(input);\n        expect(output).frozen;\n        expect(output).instanceOf(Array);\n        expect(output).lengthOf(2);\n        expect(output).deep.eq(input);\n        expect(input).not.frozen;\n        expect(one).not.frozen;\n        expect(two).not.frozen;\n        for (const v of output) {\n            expect(v).frozen;\n        }\n    });\n    it('should work for Maps', () => {\n        const key = {\n            foo: 'bar',\n        };\n        const value = {\n            baz: 42,\n        };\n        const input = new Map([[key, value]]);\n        const output = deepFreeze(input);\n        expect(output).frozen;\n        expect(output).lengthOf(1);\n        expect(output).deep.eq(input);\n        expect(input).not.frozen;\n        expect(key).not.frozen;\n        expect(value).not.frozen;\n        for (const [k, v] of output.entries()) {\n            expect(k).frozen;\n            expect(v).frozen;\n        }\n    });\n    it('should work for Sets', () => {\n        const value = {\n            foo: 'bar',\n        };\n        const input = new Set([value]);\n        const output = deepFreeze(input);\n        expect(output).frozen;\n        expect(output).lengthOf(1);\n        expect(output).deep.eq(input);\n        expect(input).not.frozen;\n        expect(value).not.frozen;\n        for (const v of output.values()) {\n            expect(v).frozen;\n        }\n    });\n    it('should work for RegExps', () => {\n        const input = /filter/;\n        const output = deepFreeze(input);\n        expect(output).frozen;\n        expect(output).instanceOf(RegExp);\n    });\n});\n//# sourceMappingURL=immutable.spec.js.map"
    },
    "dist/test/unit/noop-logger.spec.js": {
      "tests": [
        {
          "id": "44",
          "name": "noopLogger should not enable any logging"
        },
        {
          "id": "45",
          "name": "noopLogger should not do any actual logging"
        }
      ],
      "source": "import { expect } from 'chai';\nimport sinon from 'sinon';\nimport { noopLogger } from '../../src/noop-logger.js';\ndescribe('noopLogger', () => {\n    it('should not enable any logging', () => {\n        expect(noopLogger.isTraceEnabled()).false;\n        expect(noopLogger.isDebugEnabled()).false;\n        expect(noopLogger.isInfoEnabled()).false;\n        expect(noopLogger.isWarnEnabled()).false;\n        expect(noopLogger.isErrorEnabled()).false;\n        expect(noopLogger.isFatalEnabled()).false;\n    });\n    it('should not do any actual logging', () => {\n        const logStub = sinon.stub(console, 'log');\n        noopLogger.trace();\n        noopLogger.debug();\n        noopLogger.info();\n        noopLogger.warn();\n        noopLogger.error();\n        noopLogger.fatal();\n        expect(logStub).not.called;\n    });\n});\n//# sourceMappingURL=noop-logger.spec.js.map"
    },
    "dist/test/unit/not-empty.spec.js": {
      "tests": [
        {
          "id": "46",
          "name": "notEmpty should return true when not null or undefined"
        },
        {
          "id": "47",
          "name": "notEmpty should return false when null"
        },
        {
          "id": "48",
          "name": "notEmpty should return false when undefined"
        }
      ],
      "source": "import { expect } from 'chai';\nimport { notEmpty } from '../../src/index.js';\ndescribe(notEmpty.name, () => {\n    it('should return true when not null or undefined', () => {\n        expect(notEmpty('')).true;\n        expect(notEmpty(0)).true;\n        expect(notEmpty(false)).true;\n        expect(notEmpty(NaN)).true;\n    });\n    it('should return false when null', () => {\n        expect(notEmpty(null)).false;\n    });\n    it('should return false when undefined', () => {\n        expect(notEmpty(undefined)).false;\n    });\n});\n//# sourceMappingURL=not-empty.spec.js.map"
    },
    "dist/test/unit/string-utils.spec.js": {
      "tests": [
        {
          "id": "49",
          "name": "stringUtils normalizeWhitespaces should not change strings without consecutive whitespaces"
        },
        {
          "id": "50",
          "name": "stringUtils normalizeWhitespaces should normalize a string with multiple consecutive spaces"
        },
        {
          "id": "51",
          "name": "stringUtils normalizeWhitespaces should normalize a string with multiple consecutive spaces, tabs and new lines"
        },
        {
          "id": "52",
          "name": "stringUtils normalizeLineEndings should passthrough normal text"
        },
        {
          "id": "53",
          "name": "stringUtils normalizeLineEndings should passthrough unix line endings"
        },
        {
          "id": "54",
          "name": "stringUtils normalizeLineEndings should passthrough carriage returns"
        },
        {
          "id": "55",
          "name": "stringUtils normalizeLineEndings should replace carriage return line feeds"
        },
        {
          "id": "56",
          "name": "stringUtils propertyPath should be able to point to a path of lenght 1"
        },
        {
          "id": "57",
          "name": "stringUtils propertyPath should not be able to point to a non-existing path of length 1"
        },
        {
          "id": "58",
          "name": "stringUtils propertyPath should be able to point to a path of length 2"
        },
        {
          "id": "59",
          "name": "stringUtils propertyPath should not be able to point to a path non-existing path of length 2"
        },
        {
          "id": "60",
          "name": "stringUtils propertyPath should be able to point to a path of a union type"
        },
        {
          "id": "61",
          "name": "stringUtils escapeRegExpLiteral should return input if no special chars are found"
        },
        {
          "id": "62",
          "name": "stringUtils escapeRegExpLiteral should escape \".\""
        },
        {
          "id": "63",
          "name": "stringUtils escapeRegExpLiteral should escape \"*\""
        },
        {
          "id": "64",
          "name": "stringUtils escapeRegExpLiteral should escape \"+\""
        },
        {
          "id": "65",
          "name": "stringUtils escapeRegExpLiteral should escape \"-\""
        },
        {
          "id": "66",
          "name": "stringUtils escapeRegExpLiteral should escape \"?\""
        },
        {
          "id": "67",
          "name": "stringUtils escapeRegExpLiteral should escape \"^\""
        },
        {
          "id": "68",
          "name": "stringUtils escapeRegExpLiteral should escape \"$\""
        },
        {
          "id": "69",
          "name": "stringUtils escapeRegExpLiteral should escape \"{\""
        },
        {
          "id": "70",
          "name": "stringUtils escapeRegExpLiteral should escape \"}\""
        },
        {
          "id": "71",
          "name": "stringUtils escapeRegExpLiteral should escape \"(\""
        },
        {
          "id": "72",
          "name": "stringUtils escapeRegExpLiteral should escape \")\""
        },
        {
          "id": "73",
          "name": "stringUtils escapeRegExpLiteral should escape \"|\""
        },
        {
          "id": "74",
          "name": "stringUtils escapeRegExpLiteral should escape \"[\""
        },
        {
          "id": "75",
          "name": "stringUtils escapeRegExpLiteral should escape \"]\""
        },
        {
          "id": "76",
          "name": "stringUtils escapeRegExpLiteral should escape \"\\\""
        },
        {
          "id": "77",
          "name": "stringUtils escapeRegExpLiteral should escape \"/\""
        },
        {
          "id": "78",
          "name": "stringUtils escapeRegExp should return input if no special chars are found"
        },
        {
          "id": "79",
          "name": "stringUtils escapeRegExp should not escape `/` (that's only needed for regex literals)"
        },
        {
          "id": "80",
          "name": "stringUtils escapeRegExp should escape \".\""
        },
        {
          "id": "81",
          "name": "stringUtils escapeRegExp should escape \"*\""
        },
        {
          "id": "82",
          "name": "stringUtils escapeRegExp should escape \"+\""
        },
        {
          "id": "83",
          "name": "stringUtils escapeRegExp should escape \"-\""
        },
        {
          "id": "84",
          "name": "stringUtils escapeRegExp should escape \"?\""
        },
        {
          "id": "85",
          "name": "stringUtils escapeRegExp should escape \"^\""
        },
        {
          "id": "86",
          "name": "stringUtils escapeRegExp should escape \"$\""
        },
        {
          "id": "87",
          "name": "stringUtils escapeRegExp should escape \"{\""
        },
        {
          "id": "88",
          "name": "stringUtils escapeRegExp should escape \"}\""
        },
        {
          "id": "89",
          "name": "stringUtils escapeRegExp should escape \"(\""
        },
        {
          "id": "90",
          "name": "stringUtils escapeRegExp should escape \")\""
        },
        {
          "id": "91",
          "name": "stringUtils escapeRegExp should escape \"|\""
        },
        {
          "id": "92",
          "name": "stringUtils escapeRegExp should escape \"[\""
        },
        {
          "id": "93",
          "name": "stringUtils escapeRegExp should escape \"]\""
        },
        {
          "id": "94",
          "name": "stringUtils escapeRegExp should escape \"\\\""
        },
        {
          "id": "95",
          "name": "stringUtils normalizeFileName should normalize `\\`"
        },
        {
          "id": "96",
          "name": "stringUtils normalizeFileName should normalize `/`"
        }
      ],
      "source": "import { expect } from 'chai';\nimport { normalizeWhitespaces, propertyPath, escapeRegExpLiteral, escapeRegExp, normalizeFileName, normalizeLineEndings } from '../../src/index.js';\ndescribe('stringUtils', () => {\n    describe(normalizeWhitespaces.name, () => {\n        it('should not change strings without consecutive whitespaces', () => {\n            expect(normalizeWhitespaces('foo bar baz')).eq('foo bar baz');\n        });\n        it('should normalize a string with multiple consecutive spaces', () => {\n            expect(normalizeWhitespaces('foo  bar   baz')).eq('foo bar baz');\n        });\n        it('should normalize a string with multiple consecutive spaces, tabs and new lines', () => {\n            expect(normalizeWhitespaces('foo \\t \\n bar\\n\\tbaz')).eq('foo bar baz');\n        });\n    });\n    describe(normalizeLineEndings.name, () => {\n        it('should passthrough normal text', () => {\n            expect(normalizeLineEndings('lorum ipsum')).eq('lorum ipsum');\n        });\n        it('should passthrough unix line endings', () => {\n            expect(normalizeLineEndings('lorum\\nipsum\\n')).eq('lorum\\nipsum\\n');\n        });\n        it('should passthrough carriage returns', () => {\n            expect(normalizeLineEndings('lorum\\ripsum\\r')).eq('lorum\\ripsum\\r');\n        });\n        it('should replace carriage return line feeds', () => {\n            expect(normalizeLineEndings('lorum\\r\\nipsum\\r\\n')).eq('lorum\\nipsum\\n');\n        });\n    });\n    describe(propertyPath.name, () => {\n        it('should be able to point to a path of lenght 1', () => {\n            expect(propertyPath()('bar')).eq('bar');\n        });\n        it('should not be able to point to a non-existing path of length 1', () => {\n            // @ts-expect-error Argument of type '\"baz\"' is not assignable to parameter of type '\"bar\"'.ts(2345)\n            propertyPath()('baz');\n        });\n        it('should be able to point to a path of length 2', () => {\n            expect(propertyPath()('bar', 'baz')).eq('bar.baz');\n        });\n        it('should not be able to point to a path non-existing path of length 2', () => {\n            // @ts-expect-error Argument of type '\"bar\"' is not assignable to parameter of type '\"quux\"'.ts(2345)\n            propertyPath()('qux', 'bar');\n        });\n        it('should be able to point to a path of a union type', () => {\n            expect(propertyPath()('flags', 'f1')).eq('flags.f1');\n            expect(propertyPath()('flags', 'f2', 'f3')).eq('flags.f2.f3');\n        });\n    });\n    describe(escapeRegExpLiteral.name, () => {\n        it('should return input if no special chars are found', () => {\n            expect(escapeRegExpLiteral('something normal')).eq('something normal');\n        });\n        for (const letter of '.*+-?^${}()|[]\\\\/') {\n            it(`should escape \"${letter}\"`, () => {\n                expect(escapeRegExpLiteral(letter)).eq(`\\\\${letter}`);\n            });\n        }\n    });\n    describe(escapeRegExp.name, () => {\n        it('should return input if no special chars are found', () => {\n            expect(escapeRegExp('something normal')).eq('something normal');\n        });\n        it(\"should not escape `/` (that's only needed for regex literals)\", () => {\n            expect(escapeRegExp('n/a')).eq('n/a');\n        });\n        for (const letter of '.*+-?^${}()|[]\\\\') {\n            it(`should escape \"${letter}\"`, () => {\n                expect(escapeRegExp(letter)).eq(`\\\\${letter}`);\n            });\n        }\n    });\n    describe(normalizeFileName.name, () => {\n        it('should normalize `\\\\`', () => {\n            expect(normalizeFileName('test\\\\util\\\\foo.spec.js')).eq('test/util/foo.spec.js');\n        });\n        it('should normalize `/`', () => {\n            expect(normalizeFileName('test/util/foo.spec.js')).eq('test/util/foo.spec.js');\n        });\n    });\n});\n//# sourceMappingURL=string-utils.spec.js.map"
    },
    "dist/test/unit/stryker-error.spec.js": {
      "tests": [
        {
          "id": "97",
          "name": "StrykerError should set inner error"
        },
        {
          "id": "98",
          "name": "StrykerError should add inner error to the message"
        },
        {
          "id": "99",
          "name": "StrykerError should work without an inner error"
        }
      ],
      "source": "import { expect } from 'chai';\nimport { errorToString } from '../../src/errors.js';\nimport { StrykerError } from '../../src/stryker-error.js';\ndescribe('StrykerError', () => {\n    it('should set inner error', () => {\n        const innerError = new Error();\n        const sut = new StrykerError('some message', innerError);\n        expect(sut.innerError).eq(innerError);\n    });\n    it('should add inner error to the message', () => {\n        const innerError = new Error();\n        const sut = new StrykerError('some message', innerError);\n        expect(sut.message).eq(`some message. Inner error: ${errorToString(innerError)}`);\n    });\n    it('should work without an inner error', () => {\n        const sut = new StrykerError('foo bar');\n        expect(sut.message).eq('foo bar');\n    });\n});\n//# sourceMappingURL=stryker-error.spec.js.map"
    },
    "dist/test/unit/task.spec.js": {
      "tests": [
        {
          "id": "100",
          "name": "Task should give access to underlying promise"
        },
        {
          "id": "101",
          "name": "Task should be able to resolve the underlying promise"
        },
        {
          "id": "102",
          "name": "Task should be able to reject the underlying promise"
        },
        {
          "id": "103",
          "name": "Task should be able to know if it isCompleted"
        },
        {
          "id": "104",
          "name": "ExpirableTask instance should timeout after set period"
        },
        {
          "id": "105",
          "name": "ExpirableTask instance should be able to resolve within time"
        },
        {
          "id": "106",
          "name": "ExpirableTask instance should be able to reject within time"
        },
        {
          "id": "107",
          "name": "ExpirableTask timeout should timeout a promise after a set period"
        },
        {
          "id": "108",
          "name": "ExpirableTask timeout should remove any nodejs timers when promise resolves"
        }
      ],
      "source": "import { expect } from 'chai';\nimport sinon from 'sinon';\nimport { Task, ExpirableTask } from '../../src/index.js';\ndescribe(Task.name, () => {\n    it('should give access to underlying promise', () => {\n        const sut = new Task();\n        expect(sut.promise).instanceOf(Promise);\n        sut.resolve();\n    });\n    it('should be able to resolve the underlying promise', async () => {\n        const sut = new Task();\n        sut.resolve('resolved');\n        const result = await sut.promise;\n        expect(result).eq('resolved');\n    });\n    it('should be able to reject the underlying promise', async () => {\n        const sut = new Task();\n        const expectedError = new Error('expected error');\n        sut.reject(expectedError);\n        await expect(sut.promise).rejectedWith(expectedError);\n    });\n    it('should be able to know if it isCompleted', () => {\n        const sut = new Task();\n        expect(sut.isCompleted).false;\n        sut.resolve();\n        expect(sut.isCompleted).true;\n    });\n});\ndescribe(ExpirableTask.name, () => {\n    describe('instance', () => {\n        it('should timeout after set period', async () => {\n            const task = new ExpirableTask(0);\n            const result = await task.promise;\n            expect(result).eq(ExpirableTask.TimeoutExpired);\n        });\n        it('should be able to resolve within time', async () => {\n            const task = new ExpirableTask(0);\n            task.resolve('in time');\n            const result = await task.promise;\n            expect(result).eq('in time');\n        });\n        it('should be able to reject within time', async () => {\n            const task = new ExpirableTask(0);\n            const expectedError = new Error('expected error');\n            task.reject(expectedError);\n            await expect(task.promise).rejectedWith(expectedError);\n        });\n    });\n    describe('timeout', () => {\n        it('should timeout a promise after a set period', async () => {\n            const task = new Task();\n            const actual = await ExpirableTask.timeout(task.promise, 0);\n            expect(actual).eq(ExpirableTask.TimeoutExpired);\n            task.resolve(undefined);\n        });\n        it('should remove any nodejs timers when promise resolves', async () => {\n            // Arrange\n            const expectedTimer = 234;\n            const setTimeoutStub = sinon.stub(global, 'setTimeout');\n            const clearTimeoutStub = sinon.stub(global, 'clearTimeout');\n            setTimeoutStub.returns(expectedTimer);\n            const expectedResult = 'expectedResult';\n            const p = Promise.resolve(expectedResult);\n            const delay = 10;\n            // Act\n            const result = await ExpirableTask.timeout(p, delay);\n            // Assert\n            expect(result).eq(expectedResult);\n            expect(clearTimeoutStub).calledWith(expectedTimer);\n            expect(setTimeoutStub).calledWith(sinon.match.func, delay);\n        });\n    });\n});\n//# sourceMappingURL=task.spec.js.map"
    }
  },
  "projectRoot": "/home/nicojs/github/stryker-js/packages/util",
  "config": {
    "$schema": "./packages/core/schema/stryker-schema.json",
    "coverageAnalysis": "perTest",
    "testRunner": "mocha",
    "reporters": ["json", "progress", "html", "dashboard"],
    "plugins": ["../mocha-runner/dist/src/index.js", "../typescript-checker/dist/src/index.js"],
    "ignoreStatic": false,
    "checkers": [],
    "dashboard": {
      "module": "util",
      "baseUrl": "https://dashboard.stryker-mutator.io/api/reports",
      "reportType": "full"
    },
    "buildCommand": "tsc -b",
    "mochaOptions": {
      "spec": ["dist/test/unit/**/*.js"]
    },
    "incremental": true,
    "concurrency": 2,
    "mutate": ["src/known-keys.ts"],
    "allowConsoleColors": true,
    "checkerNodeArgs": [],
    "commandRunner": {
      "command": "npm test"
    },
    "clearTextReporter": {
      "allowColor": true,
      "logTests": true,
      "maxTestsToLog": 3
    },
    "eventReporter": {
      "baseDir": "reports/mutation/events"
    },
    "ignorePatterns": [],
    "incrementalFile": "reports/stryker-incremental.json",
    "force": false,
    "fileLogLevel": "off",
    "inPlace": false,
    "logLevel": "info",
    "maxConcurrentTestRunners": 9007199254740991,
    "maxTestRunnerReuse": 0,
    "mutator": {
      "plugins": null,
      "excludedMutations": []
    },
    "appendPlugins": [],
    "htmlReporter": {
      "fileName": "reports/mutation/mutation.html"
    },
    "jsonReporter": {
      "fileName": "reports/mutation/mutation.json"
    },
    "disableTypeChecks": "{test,src,lib}/**/*.{js,ts,jsx,tsx,html,vue}",
    "symlinkNodeModules": true,
    "tempDirName": ".stryker-tmp",
    "cleanTempDir": true,
    "testRunnerNodeArgs": [],
    "thresholds": {
      "high": 80,
      "low": 60,
      "break": null
    },
    "timeoutFactor": 1.5,
    "timeoutMS": 5000,
    "dryRunTimeoutMinutes": 5,
    "tsconfigFile": "tsconfig.json",
    "warnings": true,
    "disableBail": false
  },
  "framework": {
    "name": "StrykerJS",
    "version": "6.2.0-beta.0",
    "branding": {
      "homepageUrl": "https://stryker-mutator.io",
      "imageUrl": "data:image/svg+xml;utf8,%3Csvg viewBox='0 0 1458 1458' xmlns='http://www.w3.org/2000/svg' fill-rule='evenodd' clip-rule='evenodd' stroke-linejoin='round' stroke-miterlimit='2'%3E%3Cpath fill='none' d='M0 0h1458v1458H0z'/%3E%3CclipPath id='a'%3E%3Cpath d='M0 0h1458v1458H0z'/%3E%3C/clipPath%3E%3Cg clip-path='url(%23a)'%3E%3Cpath d='M1458 729c0 402.655-326.345 729-729 729S0 1131.655 0 729C0 326.445 326.345 0 729 0s729 326.345 729 729' fill='%23e74c3c' fill-rule='nonzero'/%3E%3Cpath d='M778.349 1456.15L576.6 1254.401l233-105 85-78.668v-64.332l-257-257-44-187-50-208 251.806-82.793L1076.6 389.401l380.14 379.15c-19.681 367.728-311.914 663.049-678.391 687.599z' fill-opacity='.3'/%3E%3Cpath d='M753.4 329.503c41.79 0 74.579 7.83 97.925 25.444 23.571 18.015 41.69 43.956 55.167 77.097l11.662 28.679 165.733-58.183-14.137-32.13c-26.688-60.655-64.896-108.61-114.191-144.011-49.329-35.423-117.458-54.302-204.859-54.302-50.78 0-95.646 7.376-134.767 21.542-40.093 14.671-74.09 34.79-102.239 60.259-28.84 26.207-50.646 57.06-65.496 92.701-14.718 35.052-22.101 72.538-22.101 112.401 0 72.536 20.667 133.294 61.165 182.704 38.624 47.255 98.346 88.037 179.861 121.291 42.257 17.475 78.715 33.125 109.227 46.994 27.193 12.361 49.294 26.124 66.157 41.751 15.309 14.186 26.497 30.584 33.63 49.258 7.721 20.214 11.16 45.69 11.16 76.402 0 28.021-4.251 51.787-13.591 71.219-8.832 18.374-20.171 33.178-34.523 44.219-14.787 11.374-31.193 19.591-49.393 24.466-19.68 5.359-39.14 7.993-58.69 7.993-29.359 0-54.387-3.407-75.182-10.747-20.112-7.013-37.144-16.144-51.259-27.486-13.618-11.009-24.971-23.766-33.744-38.279-9.64-15.8-17.272-31.924-23.032-48.408l-10.965-31.376-161.669 60.585 10.734 30.124c10.191 28.601 24.197 56.228 42.059 82.748 18.208 27.144 41.322 51.369 69.525 72.745 27.695 21.075 60.904 38.218 99.481 51.041 37.777 12.664 82.004 19.159 132.552 19.159 49.998 0 95.818-8.321 137.611-24.622 42.228-16.471 78.436-38.992 108.835-67.291 30.719-28.597 54.631-62.103 71.834-100.642 17.263-38.56 25.923-79.392 25.923-122.248 0-54.339-8.368-100.37-24.208-138.32-16.29-38.759-38.252-71.661-65.948-98.797-26.965-26.418-58.269-48.835-93.858-67.175-33.655-17.241-69.196-33.11-106.593-47.533-35.934-13.429-65.822-26.601-89.948-39.525-22.153-11.868-40.009-24.21-53.547-37.309-11.429-11.13-19.83-23.678-24.718-37.664-5.413-15.49-7.98-33.423-7.98-53.577 0-40.883 11.293-71.522 37.086-90.539 28.443-20.825 64.985-30.658 109.311-30.658z' fill='%23f1c40f' fill-rule='nonzero'/%3E%3Cpath d='M720 0h18v113h-18zM1458 738v-18h-113v18h113zM720 1345h18v113h-18zM113 738v-18H0v18h113z'/%3E%3C/g%3E%3C/svg%3E"
    },
    "dependencies": {
      "mocha": "10.0.0",
      "jasmine-core": "4.3.0",
      "typescript": "4.7.4"
    }
  }
}
