{
  "name": "ExampleProject.csproj",
  "health": "warning",
  "mutationScore": 20.0,
  "totals": {
    "DetectedMutants": 3.0,
    "TotalMutants": 15.0,
    "KilledMutants": 2.0,
    "SurvivedMutants": 12.0,
    "SkippedMutants": 1.0,
    "TimeoutMutants": 1.0,
    "CompileErrors": 2.0,
    "PossibleMutants": 16.0,
    "ThresholdHigh": 80.0,
    "ThresholdLow": 60.0,
    "ThresholdBreak": 0.0
  },
  "childResults": [
    {
      "name": "ExampleProject",
      "health": "warning",
      "mutationScore": 20.0,
      "totals": {
        "DetectedMutants": 3.0,
        "TotalMutants": 15.0,
        "KilledMutants": 2.0,
        "SurvivedMutants": 12.0,
        "SkippedMutants": 1.0,
        "TimeoutMutants": 1.0,
        "CompileErrors": 2.0,
        "PossibleMutants": 16.0
      },
      "childResults": [
        {
          "name": "DummyCalc.cs",
          "language": "cs",
          "health": "danger",
          "source": "using ExampleClassLibrary;\r\n\r\nnamespace ExampleProject\r\n{\r\n    public class DummyCalc\r\n    {\r\n        public int SomeCalc(int first, int second)\r\n        {\r\n\t\t\twhile(second > 0) {\r\n\t\t\t\tfirst = first + second + 1;\r\n\t\t\t\tsecond--;\r\n\t\t\t}\r\n\t\t\twhile(1 < 0) {\r\n\t\t\t\t// endless looping\r\n\t\t\t}\r\n            return first;\r\n        }\r\n\r\n        public int Recursive(int n)\r\n        {\r\n            var recursive = new RecursiveMath();\r\n            return recursive.Fibinacci(n);\r\n        }\r\n    }\r\n}\r\n",
          "mutationScore": 0.0,
          "totals": {
            "DetectedMutants": 0.0,
            "TotalMutants": 7.0,
            "KilledMutants": 0.0,
            "SurvivedMutants": 7.0,
            "SkippedMutants": 0.0,
            "TimeoutMutants": 0.0,
            "CompileErrors": 0.0,
            "PossibleMutants": 7.0
          },
          "mutants": [
            {
              "id": 0,
              "mutatorName": "Binary expression mutation",
              "replacement": "second < 0",
              "location": {
                "start": {
                  "line": 9,
                  "column": 9
                },
                "end": {
                  "line": 9,
                  "column": 19
                }
              },
              "status": "Survived"
            },
            {
              "id": 1,
              "mutatorName": "Binary expression mutation",
              "replacement": "second >= 0",
              "location": {
                "start": {
                  "line": 9,
                  "column": 9
                },
                "end": {
                  "line": 9,
                  "column": 19
                }
              },
              "status": "Survived"
            },
            {
              "id": 2,
              "mutatorName": "Binary expression mutation",
              "replacement": "first + second - 1",
              "location": {
                "start": {
                  "line": 10,
                  "column": 12
                },
                "end": {
                  "line": 10,
                  "column": 30
                }
              },
              "status": "Survived"
            },
            {
              "id": 3,
              "mutatorName": "Binary expression mutation",
              "replacement": "first - second ",
              "location": {
                "start": {
                  "line": 10,
                  "column": 12
                },
                "end": {
                  "line": 10,
                  "column": 27
                }
              },
              "status": "Survived"
            },
            {
              "id": 4,
              "mutatorName": "PostDecrementExpression to PostIncrementExpression mutation",
              "replacement": "\t\t\t\tsecond++",
              "location": {
                "start": {
                  "line": 11,
                  "column": 0
                },
                "end": {
                  "line": 11,
                  "column": 12
                }
              },
              "status": "Survived"
            },
            {
              "id": 5,
              "mutatorName": "Binary expression mutation",
              "replacement": "1 > 0",
              "location": {
                "start": {
                  "line": 13,
                  "column": 9
                },
                "end": {
                  "line": 13,
                  "column": 14
                }
              },
              "status": "Survived"
            },
            {
              "id": 6,
              "mutatorName": "Binary expression mutation",
              "replacement": "1 <= 0",
              "location": {
                "start": {
                  "line": 13,
                  "column": 9
                },
                "end": {
                  "line": 13,
                  "column": 14
                }
              },
              "status": "Survived"
            }
          ]
        },
        {
          "name": "DummyMath.cs",
          "language": "cs",
          "health": "warning",
          "source": "namespace ExampleProject\r\n{\r\n    public class DummyMath\r\n    {\r\n        public int Add(int first, int second)\r\n        {\r\n            return checked(first + second);\r\n        }\r\n    }\r\n}\r\n",
          "mutationScore": 50.0,
          "totals": {
            "DetectedMutants": 1.0,
            "TotalMutants": 2.0,
            "KilledMutants": 1.0,
            "SurvivedMutants": 1.0,
            "SkippedMutants": 0.0,
            "TimeoutMutants": 0.0,
            "CompileErrors": 0.0,
            "PossibleMutants": 2.0
          },
          "mutants": [
            {
              "id": 7,
              "mutatorName": "Remove checked expression",
              "replacement": "first + second",
              "location": {
                "start": {
                  "line": 7,
                  "column": 19
                },
                "end": {
                  "line": 7,
                  "column": 42
                }
              },
              "status": "Survived"
            },
            {
              "id": 8,
              "mutatorName": "Binary expression mutation",
              "replacement": "first - second",
              "location": {
                "start": {
                  "line": 7,
                  "column": 27
                },
                "end": {
                  "line": 7,
                  "column": 41
                }
              },
              "status": "Killed"
            }
          ]
        },
        {
          "name": "Endlessloop.cs",
          "language": "cs",
          "health": "warning",
          "source": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace ExampleProject\r\n{\r\n    public class EndlessLoop\r\n    {\r\n        public void SomeLoop()\r\n        {\r\n            while (1 < 0)\r\n            {\r\n                ;\r\n            }\r\n        }\r\n    }\r\n}\r\n",
          "mutationScore": 50.0,
          "totals": {
            "DetectedMutants": 1.0,
            "TotalMutants": 2.0,
            "KilledMutants": 0.0,
            "SurvivedMutants": 1.0,
            "SkippedMutants": 0.0,
            "TimeoutMutants": 1.0,
            "CompileErrors": 0.0,
            "PossibleMutants": 2.0
          },
          "mutants": [
            {
              "id": 9,
              "mutatorName": "Binary expression mutation",
              "replacement": "1 > 0",
              "location": {
                "start": {
                  "line": 11,
                  "column": 19
                },
                "end": {
                  "line": 11,
                  "column": 24
                }
              },
              "status": "Timeout"
            },
            {
              "id": 10,
              "mutatorName": "Binary expression mutation",
              "replacement": "1 <= 0",
              "location": {
                "start": {
                  "line": 11,
                  "column": 19
                },
                "end": {
                  "line": 11,
                  "column": 24
                }
              },
              "status": "Survived"
            }
          ]
        },
        {
          "name": "NewCsharpFeatures.cs",
          "language": "cs",
          "health": "danger",
          "source": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace ExampleProject\r\n{\r\n    public class NewCsharpFeatures\r\n    {\r\n        public double GetDefaultDoubleValue()\r\n        {\r\n            return default;\r\n        }\r\n    }\r\n}\r\n",
          "mutationScore": 0.0,
          "totals": {
            "DetectedMutants": 0.0,
            "TotalMutants": 0.0,
            "KilledMutants": 0.0,
            "SurvivedMutants": 0.0,
            "SkippedMutants": 0.0,
            "TimeoutMutants": 0.0,
            "CompileErrors": 0.0,
            "PossibleMutants": 0.0
          },
          "mutants": []
        },
        {
          "name": "StringMagic.cs",
          "language": "cs",
          "health": "danger",
          "source": "namespace ExampleProject\r\n{\r\n    public class StringMagic\r\n    {\r\n        public string AddTwoStrings(string first, string second)\r\n        {\r\n            if(first.Length > 2)\r\n            {\r\n                return first + second;\r\n            } else\r\n            {\r\n                return second + first;\r\n            }\r\n        }\r\n\r\n        private bool Demo(out string test)\r\n        {\r\n            test = \"toto\";\r\n            return true;\r\n        }\r\n    }\r\n}\r\n",
          "mutationScore": 0.0,
          "totals": {
            "DetectedMutants": 0.0,
            "TotalMutants": 3.0,
            "KilledMutants": 0.0,
            "SurvivedMutants": 3.0,
            "SkippedMutants": 1.0,
            "TimeoutMutants": 0.0,
            "CompileErrors": 2.0,
            "PossibleMutants": 4.0
          },
          "mutants": [
            {
              "id": 11,
              "mutatorName": "Binary expression mutation",
              "replacement": "first.Length < 2",
              "location": {
                "start": {
                  "line": 7,
                  "column": 15
                },
                "end": {
                  "line": 7,
                  "column": 31
                }
              },
              "status": "Survived"
            },
            {
              "id": 12,
              "mutatorName": "Binary expression mutation",
              "replacement": "first.Length >= 2",
              "location": {
                "start": {
                  "line": 7,
                  "column": 15
                },
                "end": {
                  "line": 7,
                  "column": 31
                }
              },
              "status": "Survived"
            },
            {
              "id": 13,
              "mutatorName": "Binary expression mutation",
              "replacement": "second - first",
              "location": {
                "start": {
                  "line": 6,
                  "column": 23
                },
                "end": {
                  "line": 6,
                  "column": 37
                }
              },
              "status": "BuildError"
            },
            {
              "id": 14,
              "mutatorName": "Binary expression mutation",
              "replacement": "first - second",
              "location": {
                "start": {
                  "line": 3,
                  "column": 23
                },
                "end": {
                  "line": 3,
                  "column": 37
                }
              },
              "status": "BuildError"
            },
            {
              "id": 15,
              "mutatorName": "String mutation",
              "replacement": "\"\"",
              "location": {
                "start": {
                  "line": 18,
                  "column": 19
                },
                "end": {
                  "line": 18,
                  "column": 25
                }
              },
              "status": "Skipped"
            },
            {
              "id": 16,
              "mutatorName": "Boolean mutation",
              "replacement": "false",
              "location": {
                "start": {
                  "line": 19,
                  "column": 19
                },
                "end": {
                  "line": 19,
                  "column": 23
                }
              },
              "status": "Survived"
            }
          ]
        },
        {
          "name": "UnsafeCode.cs",
          "language": "cs",
          "health": "good",
          "source": "using System;\r\nusing System.Collections.Generic;\r\nusing System.Text;\r\n\r\nnamespace ExampleProject\r\n{\r\n    public class UnsafeCode\r\n    {\r\n        public int GetElement(int[] arrayOfInt, int index)\r\n        {\r\n            unsafe\r\n            {\r\n                // Must pin object on heap so that it doesn't move while using interior pointers.\r\n                fixed (int* p = &arrayOfInt[0])\r\n                {\r\n                    return *(p + index);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n",
          "mutationScore": 100.0,
          "totals": {
            "DetectedMutants": 1.0,
            "TotalMutants": 1.0,
            "KilledMutants": 1.0,
            "SurvivedMutants": 0.0,
            "SkippedMutants": 0.0,
            "TimeoutMutants": 0.0,
            "CompileErrors": 0.0,
            "PossibleMutants": 1.0
          },
          "mutants": [
            {
              "id": 17,
              "mutatorName": "Binary expression mutation",
              "replacement": "p - index",
              "location": {
                "start": {
                  "line": 16,
                  "column": 29
                },
                "end": {
                  "line": 16,
                  "column": 38
                }
              },
              "status": "Killed"
            }
          ]
        }
      ]
    }
  ]
}
